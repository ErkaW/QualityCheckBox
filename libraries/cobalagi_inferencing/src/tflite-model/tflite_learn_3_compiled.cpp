/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.05.2025 09:08:41

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 20341, -26997, -27211, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00024631281848996878, 0.0002099482953781262, 0.00020645619952119887, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 66,63,112,-80,-39,-3,-13,23,-15,62,19,11,-16,-80,83,10,-55,47,127,96,-25,-25,51,-65,-122,88,-69,54,102,23,-19,21, 
  /* [1][0][][] */ 55,-38,-72,19,-18,127,-15,-7,120,-60,-3,-106,-61,103,36,-50,91,-44,-38,-94,-110,22,108,66,26,23,5,-26,-93,-56,-3,-52, 
  /* [2][0][][] */ -40,77,-81,77,76,-43,-30,114,92,16,127,-66,-99,-90,76,120,-85,-52,-29,-115,73,117,-62,-93,93,-54,-16,-125,-8,-80,86,-57, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0038820609916001558, 0.0033089308999478817, 0.0032538929954171181, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 176, 72, 102, -74, -254, 143, -170, 43, 66, 852, 45, 959, -299, -5, -254, 4, -41, -379, 1642, -181, -302, 28, -99, -108, 312, -257, -318, 916, 1478, 18, -231, 1295, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.4503420213004574e-05, 4.001023989985697e-05, 3.9715021557640284e-05, 4.3976753659080714e-05, 4.4768348743673414e-05, 4.3236785131739452e-05, 4.097992496099323e-05, 4.1967752622440457e-05, 4.9245099944528192e-05, 4.911883661407046e-05, 4.1832052374957129e-05, 6.0518832469824702e-05, 4.4590993638848886e-05, 4.2850158934015781e-05, 4.5271768613019958e-05, 4.2001283873105422e-05, 4.4256703404244035e-05, 4.2609106458257884e-05, 6.5728796471375972e-05, 4.6081157051958144e-05, 4.4004795199725777e-05, 4.5529428462032229e-05, 4.3657018977683038e-05, 4.331145464675501e-05, 4.435944720171392e-05, 4.2004365241155028e-05, 4.224163421895355e-05, 4.9745209253160283e-05, 4.5865974243497476e-05, 4.1030722059076652e-05, 4.1488459828542545e-05, 5.4216128773987293e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -33,-60,101,-11,116,0,-80,-111,52,-90,-101,12,65,12,-38,49,-49,-30,-62,-54,-60,-98,5,112,-115,-2,77,-44,110,-4,-23,-76,71,-70,-80,46,-106,-79,-104,30,73,-78,-101,100,36,-106,101,-15,12,-54,-37,101,-75,-59,-86,104,38,65,127,-108,-65,82,-38,43,-6,17,69,89,56,82,91,-103,103,-110,37,83,-103,14,-56,9,56,15,97,-4,-58,-35,-87,103,34,111,-14,-103,16,62,30,5, 
  /* [1][0][][] */ -91,29,-75,-1,-59,89,42,12,82,-112,-114,100,60,-25,27,65,120,-46,45,123,-49,-5,40,31,17,32,-43,118,14,10,108,-75,67,112,-12,19,60,63,-10,-72,-67,11,-29,-103,-49,38,-40,-60,-24,-86,116,66,18,88,-82,-50,20,95,51,91,-66,114,-74,-80,-57,39,83,42,97,23,18,12,-119,87,-52,53,97,-47,-44,63,-84,76,-53,-127,34,124,-74,-71,89,87,101,8,93,108,28,-17, 
  /* [2][0][][] */ 72,60,-60,114,18,-66,95,103,-100,96,-38,122,83,-19,95,-111,-65,-28,30,51,-113,-14,123,21,10,80,112,8,-81,75,88,96,-71,-19,-99,-92,-93,104,111,-30,-127,-87,19,-5,-69,126,-23,-82,111,33,89,-104,-56,69,19,14,-81,99,-68,10,-27,86,-48,70,91,46,54,95,-97,80,1,-87,32,-49,46,33,-67,-24,5,41,36,-93,-22,-50,1,-104,-18,-41,89,120,-29,1,-55,-98,-56,-55, 
  /* [3][0][][] */ 52,-14,37,-30,-88,61,-106,37,46,20,64,6,107,100,66,2,107,99,-42,27,124,-84,-63,-109,-43,-96,-75,109,52,-77,86,13,-53,-37,-11,-31,-87,-31,43,50,-25,-83,-99,0,50,29,-60,-83,65,-67,55,12,104,26,94,-96,-107,-114,-114,-58,-85,26,-23,84,63,-28,-59,-29,-44,-77,16,109,30,-127,51,-47,47,97,98,-82,-81,-122,50,100,31,45,-42,-107,-70,46,3,-102,99,-81,-83,27, 
  /* [4][0][][] */ 35,84,-7,43,-41,-24,28,-3,52,68,-11,51,26,-42,-18,-69,-25,-10,-72,2,107,-90,78,24,-37,2,61,-62,-47,39,-68,-52,50,100,10,-115,-50,-12,-127,44,-52,-58,-71,-92,17,94,29,47,9,-48,-21,-65,-94,35,-87,14,22,-96,13,8,0,-87,-35,-73,-44,51,-2,-39,11,-100,-86,-76,-53,0,80,47,64,-26,-10,-76,4,-59,-87,-19,-3,66,82,2,-109,-78,28,41,18,102,-100,-25, 
  /* [5][0][][] */ 91,-104,77,69,45,-106,31,54,104,-113,2,-58,37,102,32,36,64,64,-68,103,40,54,19,-22,-127,-68,-13,-88,53,37,16,-91,-42,2,-62,-2,-112,-34,48,27,-85,-45,39,99,-50,27,34,-48,-107,107,33,40,42,18,41,-18,118,52,-44,-42,42,-71,46,-77,-25,105,-24,32,74,-3,113,-61,-40,54,-36,-69,17,-46,16,57,111,45,37,114,-79,85,-8,45,75,-94,119,99,-15,28,78,-93, 
  /* [6][0][][] */ 29,-43,120,85,-64,-70,-3,68,-13,-88,5,-93,83,56,122,-121,42,1,-2,103,-86,-124,114,60,-37,-88,-10,-60,-30,-124,47,-84,-95,-127,-46,-104,-10,39,-116,83,88,56,26,-18,-107,107,-95,-48,-89,16,-33,-73,60,-59,95,-31,4,-9,-70,120,-105,12,65,-74,-57,66,105,-51,93,2,-114,-9,56,-43,-89,-43,-89,-106,-60,-3,32,-24,41,-32,-76,-92,-42,-103,84,95,101,15,-57,-72,76,-6, 
  /* [7][0][][] */ 87,56,-40,-51,-91,127,-18,-1,115,2,-99,14,60,-86,45,71,58,18,6,121,62,37,-5,91,-96,116,45,61,-74,120,-19,39,29,24,69,86,-104,87,-7,-28,99,-74,81,71,34,-3,99,-115,55,-47,-109,-62,-19,88,22,34,120,-97,-4,-58,11,-18,88,-108,-64,-53,70,22,-126,9,74,93,93,-3,58,62,-55,57,-100,21,98,-49,-11,-72,92,36,-113,100,90,8,90,63,-52,-33,0,-89, 
  /* [8][0][][] */ -2,15,-40,-88,46,33,-62,-19,3,32,41,90,14,-34,-77,-65,-56,86,-48,22,35,-20,72,100,-127,87,44,69,-53,28,-78,108,82,-29,46,-21,104,3,-14,65,73,95,-99,-101,-25,-23,-22,96,18,-72,-48,8,-50,-6,-22,-90,50,95,-78,91,106,28,46,99,-21,-35,-17,88,-82,38,38,6,73,38,2,20,-32,94,76,42,36,67,-88,-69,25,40,64,-30,40,-30,-72,93,-65,-80,-35,39, 
  /* [9][0][][] */ 24,39,126,69,73,-102,-27,-80,53,76,8,46,-40,-53,-51,-8,19,13,-78,-69,8,106,-77,-76,126,17,8,38,-2,-70,-59,102,59,23,32,21,-53,35,-17,-24,59,-46,65,-62,107,33,-72,65,61,-11,-66,-49,73,-47,-39,116,71,-45,10,15,-74,127,76,-55,-64,16,112,58,-18,107,92,-75,16,103,-51,-65,-68,-86,-19,119,40,35,92,36,-20,-66,47,-7,92,42,-5,94,112,23,61,-8, 
  /* [10][0][][] */ -94,70,94,-76,-35,118,113,28,34,29,24,-72,106,88,-38,7,-33,83,-94,-60,-13,30,59,-69,7,66,-118,-113,-45,93,-96,-81,91,101,123,58,-39,5,-32,36,-35,124,-122,-38,-118,-60,-10,-62,-1,11,42,19,71,22,-61,-33,-103,-21,24,-47,1,70,121,51,127,-75,-99,-25,7,-35,-91,-63,95,38,-89,112,-5,67,70,-3,84,-13,65,110,-101,72,102,-21,44,11,-5,-73,-50,-42,-44,-90, 
  /* [11][0][][] */ 112,60,12,122,83,19,51,62,104,118,-33,70,-5,-29,65,-28,-32,-63,46,27,21,73,36,-66,-37,-35,-4,59,55,-25,43,15,-37,-2,44,90,-33,94,17,-27,11,83,-23,28,28,-6,-28,-40,84,61,97,23,-62,-21,23,59,-57,-16,-19,-40,-36,94,49,0,94,77,-19,49,100,71,-71,-52,27,127,-23,53,-55,43,-18,104,-72,7,-57,-6,51,-51,42,0,-69,20,24,-53,-30,5,-22,14, 
  /* [12][0][][] */ 19,66,-58,-3,86,-6,-41,27,-79,50,-22,6,-54,4,41,-80,-103,-39,-52,-87,15,-17,10,86,-40,-57,88,-102,82,1,-42,103,-91,-75,-51,21,-10,-80,-24,34,103,30,-109,-46,-20,-88,-45,107,-50,-121,-82,90,28,-8,-88,74,-28,-62,47,59,47,113,-15,44,99,23,-51,109,61,99,30,60,72,127,-19,-12,-45,27,-119,-70,-64,101,35,5,-43,23,46,101,-100,-112,87,35,90,-25,20,89, 
  /* [13][0][][] */ 110,-74,97,79,107,122,85,58,71,-103,17,-15,111,75,57,-49,-117,-65,-74,40,78,-28,115,-42,-78,24,9,16,-85,-84,81,50,38,104,-15,23,-90,-26,23,74,-59,84,-58,14,-64,34,0,-26,35,100,-20,-96,-104,32,109,-77,-32,34,-8,-84,-13,119,-66,9,-52,-58,-94,91,-34,-18,110,9,-85,14,-87,-44,-101,63,86,-86,57,-88,107,31,-83,-96,87,127,-2,-48,-74,71,115,-54,75,-16, 
  /* [14][0][][] */ -59,-108,78,49,77,-31,-19,-127,-80,-36,60,57,-31,-79,-95,-83,-54,-59,6,13,-44,26,-6,53,-123,-76,-32,26,-111,-110,-75,36,97,-29,-35,-9,88,98,14,-113,-15,-106,21,76,51,-120,49,-92,107,39,73,50,90,-28,-23,-1,-46,7,43,89,-23,-88,-37,69,-101,-14,68,-118,-97,-98,-83,89,-6,66,33,-74,53,-106,48,16,41,-35,-119,-35,-114,-92,-111,101,102,-5,70,-51,80,95,-26,47, 
  /* [15][0][][] */ -19,-37,-27,75,78,-81,66,-96,56,-3,-72,3,107,8,-91,-117,97,11,-84,31,56,22,77,115,61,87,45,101,29,71,71,-104,12,8,-63,-15,-61,113,117,-68,19,121,-55,-22,12,-79,-51,-82,-4,-68,-2,40,-90,-104,-46,-2,64,48,-59,117,-44,-76,5,118,-27,104,-70,1,-74,-5,68,-70,25,-35,62,-106,11,60,111,60,-77,48,-101,-61,-118,-36,-91,43,95,74,-113,-53,64,127,-107,94, 
  /* [16][0][][] */ -61,-7,97,-73,56,117,-49,35,48,50,-97,84,7,-43,-57,-56,105,83,69,74,118,77,-39,55,-23,38,-61,61,-93,20,38,26,-104,75,62,50,-37,58,-49,-59,28,-39,70,88,46,107,104,-7,-55,-105,23,117,-42,116,74,50,42,97,79,9,127,111,45,56,55,20,-35,96,55,96,-17,2,37,69,55,84,-7,94,-102,-34,20,-68,68,23,12,104,96,20,84,19,-9,127,71,-31,-70,21, 
  /* [17][0][][] */ 46,-118,24,80,-40,-117,-74,-104,37,-94,79,42,93,54,-123,43,25,46,98,110,-102,-21,6,-60,49,61,-87,20,100,-61,-39,71,-37,-31,27,2,-57,94,-94,-37,-104,-49,-24,-17,4,6,80,-118,80,100,-21,19,-26,72,94,-81,-127,81,-90,-121,25,-103,69,93,-93,-83,36,-110,-117,-13,102,22,8,-105,-72,60,110,-57,35,-40,3,-20,-86,-101,-122,66,74,-42,13,71,-107,-124,-20,89,7,5, 
  /* [18][0][][] */ -37,115,118,-2,10,-70,-41,38,16,94,-43,-19,-48,42,96,-15,43,-5,38,-49,62,5,49,-18,77,-57,15,103,38,-19,25,34,24,3,-51,-21,17,48,4,55,-5,16,-1,35,-20,29,40,39,30,-26,26,-7,-58,-2,30,91,-35,16,28,-47,54,127,-6,13,-29,-63,19,67,93,-17,-57,68,-59,24,-14,-31,16,75,23,-17,-31,10,-24,-50,96,0,62,37,-75,-32,-9,51,63,-14,25,29, 
  /* [19][0][][] */ 31,31,71,45,43,-83,89,85,92,-58,27,-13,-91,30,-51,60,66,-98,100,51,-23,74,-52,11,100,-74,26,-63,-86,-112,-61,40,73,-75,31,4,6,-65,-52,-93,40,-109,-75,8,-74,27,70,-87,-27,33,-37,39,-33,14,4,-11,18,93,0,-23,49,-51,89,54,-66,-3,-24,2,-8,53,67,-50,-59,-95,-53,-73,-24,-105,13,127,52,-86,-30,71,-81,-8,10,-5,80,27,-5,57,-30,103,65,-33, 
  /* [20][0][][] */ -15,73,68,98,-84,84,14,54,9,10,-90,-4,-14,81,36,-75,-52,-39,-60,-33,16,-48,-77,-74,66,-61,-104,46,20,12,-42,102,101,38,-22,61,40,-38,-19,-111,-88,-39,-85,-104,-22,-68,-75,96,58,-112,-103,32,49,103,44,-4,81,68,86,87,102,-54,-70,-20,-28,-69,-54,9,-85,-66,-73,70,-67,-62,36,17,104,73,102,127,80,2,76,-30,55,107,-15,66,14,87,27,55,22,24,-11,15, 
  /* [21][0][][] */ 58,54,65,-107,76,-61,71,14,-9,-65,-69,41,11,39,-53,-91,-94,-28,32,-5,108,-46,66,-76,25,-72,-29,71,18,16,-8,-18,8,16,-85,-127,106,88,-108,-31,-6,11,18,-14,-112,-79,-83,85,-23,-54,-1,90,39,63,-85,27,-45,45,-53,111,56,-84,21,-4,82,32,-35,-69,-116,-17,63,78,36,-47,62,63,-96,-28,60,74,16,84,40,-65,25,-89,58,-74,-92,74,101,-110,-39,-54,66,-53, 
  /* [22][0][][] */ 29,-60,-90,-112,70,-48,109,50,-109,88,-76,-105,117,-117,-117,-90,39,82,-113,-77,91,-75,30,33,72,-15,-112,86,-61,-75,-68,-107,65,57,20,5,4,-18,-78,-127,0,-10,-4,92,48,-120,89,-25,-58,-82,5,-12,-86,-94,-46,23,-8,-34,-38,-35,106,-83,-73,-112,-77,18,-114,-57,89,97,-17,3,-69,-10,63,-96,43,-52,64,77,106,-107,-71,-116,76,83,89,-32,-51,29,-83,57,13,25,-41,94, 
  /* [23][0][][] */ 51,-87,2,50,100,-118,0,-104,54,-76,78,77,21,-113,15,-40,84,-36,-101,90,83,-84,100,-39,2,-26,76,22,70,38,63,-45,-39,37,19,41,94,-16,-111,-1,-111,-8,9,-114,-73,-95,104,28,74,-107,-94,-60,85,-62,-59,82,-77,-17,100,43,-112,-83,-65,-22,28,31,-119,-117,71,-16,107,-80,-12,-24,-36,-97,38,-24,89,127,-58,-37,13,-112,88,-1,109,-27,-97,38,114,-14,99,-60,-33,86, 
  /* [24][0][][] */ -110,-70,-98,-88,-84,-80,-55,-85,64,117,87,49,127,71,-46,-108,-65,56,43,-25,109,-70,-44,-26,23,2,81,66,118,83,12,-55,47,17,63,4,-38,-77,66,-10,-60,-83,90,9,-16,-30,32,75,-56,-24,0,38,86,68,78,-66,7,86,-1,13,100,-18,60,120,-86,106,-38,-82,-106,37,-39,-11,-20,4,98,106,86,-63,-90,-111,-61,-92,-44,-97,14,70,-3,-84,44,-95,12,-71,-4,48,-79,5, 
  /* [25][0][][] */ -86,-61,-87,-11,99,-81,-112,53,45,-120,-46,20,65,-9,-118,-26,-83,54,25,-122,61,80,-19,-66,29,-64,-114,33,70,-102,32,111,88,-118,42,71,93,-65,-26,-26,-94,91,-115,-3,117,35,79,30,-114,86,-85,-5,37,-15,-72,3,-27,42,-104,70,114,44,42,37,-4,70,-25,-12,-88,-9,-34,-124,28,-109,70,16,64,68,8,33,43,48,-58,75,-85,-54,-114,-100,-32,-46,102,16,-127,-21,-27,-60, 
  /* [26][0][][] */ 81,-127,-29,-21,-72,3,-14,-19,-113,-127,106,93,-66,-52,3,-15,112,32,-82,-54,15,69,98,11,55,60,10,44,12,14,-96,-1,-21,-65,-98,-110,-70,84,-57,111,-103,101,51,29,-82,73,-41,100,-23,33,8,104,9,-50,-6,-112,105,80,56,23,5,-97,75,-10,113,-21,-62,56,-87,70,92,99,80,-112,-90,4,47,-113,-100,8,-29,87,84,-73,77,-2,-47,15,-83,114,5,32,-57,112,52,76, 
  /* [27][0][][] */ 59,54,-20,-45,-54,-55,-46,-2,69,95,49,-45,-46,63,103,19,72,6,43,-82,-82,31,2,-6,-36,41,-71,5,57,8,-6,-3,70,71,-70,-32,-50,-38,-93,87,-63,26,48,39,125,35,83,107,98,48,41,-68,-85,-69,-2,-26,87,-9,-86,-39,-52,20,-34,48,32,-28,-73,97,63,38,-101,5,59,-9,16,-49,30,-29,88,127,80,-1,91,-46,-44,-43,-3,30,-44,6,-25,-36,46,17,73,86, 
  /* [28][0][][] */ 108,37,123,77,-104,-46,-63,-37,-16,-51,82,69,-98,-55,54,119,118,127,-56,55,-15,54,-67,-40,-70,102,-51,-28,-46,-93,27,-1,-69,46,103,111,55,-69,-15,48,125,64,-66,84,-56,14,42,79,56,-63,-77,-28,-64,44,86,71,58,2,106,80,-2,17,-86,15,79,89,14,95,-32,45,-90,-27,83,73,53,-63,-106,-23,-55,75,-53,-67,104,-15,86,-79,85,-65,-86,-42,-1,-60,-24,109,-83,-32, 
  /* [29][0][][] */ 76,76,63,-42,-78,9,-122,12,109,-6,-91,-103,99,-108,-42,-39,-103,109,24,-72,-84,-32,61,6,-2,5,-45,-30,-108,-16,112,-5,56,8,-81,-32,-9,113,-9,98,53,109,-37,90,22,112,-47,-21,23,-12,58,-103,71,-99,115,48,-101,61,-48,120,-127,120,-104,-56,-65,-66,58,93,119,-76,29,-79,114,110,80,28,113,-60,-31,65,-8,-71,-16,-83,68,122,52,79,-44,102,75,83,-108,14,-3,86, 
  /* [30][0][][] */ 23,-74,-69,38,-102,21,-73,-17,118,-20,-7,-44,-104,17,53,11,-10,31,96,-110,39,-110,-122,8,-118,20,-78,121,-14,-112,-100,2,-86,-78,-122,-60,11,-24,-5,22,85,-84,-19,95,101,-50,99,56,-76,77,17,-111,97,-57,-17,99,-84,-57,-85,-58,-108,-8,-81,-29,-112,-96,-103,94,-65,109,48,-39,-93,104,35,-91,-61,-79,-83,-63,25,28,-110,-23,-116,23,-113,108,-42,-127,80,56,-36,-8,5,-75, 
  /* [31][0][][] */ 98,-30,65,127,60,53,-20,-48,1,23,-35,-55,77,-69,6,117,-20,-45,36,53,62,61,10,113,77,-63,55,61,-34,-77,67,98,42,49,-44,37,108,7,-18,-67,75,-33,14,58,47,-17,1,56,85,20,82,-21,-76,-28,-37,49,-87,77,58,125,-20,49,75,-37,84,110,-2,-40,94,-59,-91,23,-66,5,51,37,-51,-2,67,111,-43,0,52,72,73,100,-43,26,26,-15,-31,-37,32,98,14,29, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018913953099399805, 0.0017004351830109954, 0.0016878884052857757, 0.0018690120195969939, 0.001902654767036438, 0.0018375633517280221, 0.0017416467890143394, 0.0017836294136941433, 0.002092916751280427, 0.0020875504706054926, 0.0017778621986508369, 0.0025720503181219101, 0.0018951172241941094, 0.0018211316782981157, 0.0019240501569584012, 0.0017850544536486268, 0.0018809097819030285, 0.0018108870135620236, 0.0027934738900512457, 0.001958449138328433, 0.0018702037632465363, 0.00193500064779073, 0.0018554232083261013, 0.0018407367169857025, 0.0018852765206247568, 0.0017851854208856821, 0.001795269432477653, 0.0021141713950783014, 0.0019493038998916745, 0.0017438055947422981, 0.0017632595263421535, 0.002304185414686799, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2490, 4777, 9371, 2462, -3136, -3374, 25136, 2691, 2611, -1751, 10799, -313, -10901, 2415, 14866, 10309, 16007, 5938, -4685, -4865, 5542, 46391, 20278, 16964, 1787, 805, 5940, 3385, 3008, -4594, 7311, -3937, -301, 5997, 103, 1357, 8680, 4471, -2215, 5184, 7261, 5083, 4880, 16790, 4724, 6685, 2002, 8662, 4693, -7515, -9513, 485, -314, -1553, 2258, -29, 206, -1068, -5279, 11716, -1062, 2117, -1166, -1961, -3993, 8440, 35184, 1807, -2747, 828, 1451, 2541, 2061, -1152, 751, 9029, -534, 15963, 20811, -953, 9147, 1864, -692, 2017, 13600, 10011, 5201, 1838, 5989, 5230, -470, -9628, 600, -2091, -2117, -2245, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00024933210806921124, 0.00033156626159325242, 0.00025606557028368115, 0.00035996467340737581, 0.00033786543644964695, 0.00043678743531927466, 0.00013211776968091726, 0.00026134212384931743, 0.00023494477500207722, 0.00036714176530949771, 0.00018297879432793707, 0.00021764000121038407, 0.0002312209689989686, 0.0011665127240121365, 0.00020796415628865361, 0.00011401459778426215, 0.00011728922254405916, 0.00024496999685652554, 0.00041954638436436653, 0.00034621648956090212, 0.00011209643707843497, 5.8785317378351465e-05, 0.00015141010226216167, 9.7945085144601762e-05, 0.00013270898489281535, 0.00061629654373973608, 0.00050086539704352617, 0.00032212561927735806, 0.00016768764180596918, 0.00042341553489677608, 0.00020175632380414754, 0.00019642150436993688, 0.00017651768575888127, 0.00019400115706957877, 0.00024963036412373185, 0.00018099085718858987, 0.00021982702310197055, 0.0002425521524855867, 0.00026905554113909602, 0.00034301006235182285, 0.00017569877672940493, 0.00051104684825986624, 0.0003170021518599242, 0.00013879121979698539, 0.00041811258415691555, 0.0001513980096206069, 0.00026066805003210902, 0.00024914025561884046, 0.00029169570188969374, 0.00017736597510520369, 0.00016735975805204362, 0.00019238141248933971, 0.00052206724649295211, 0.00020559455151669681, 0.00034382226294837892, 0.0004057781770825386, 0.00052343530114740133, 0.00024091325758490711, 0.00029180428828112781, 0.00015766650903970003, 0.00069905217969790101, 0.00031454599229618907, 0.00022419703600462526, 0.00039946922333911061, 0.00047195167280733585, 0.00022876146249473095, 6.1743936385028064e-05, 0.00022232650371734053, 0.00041600270196795464, 0.00038806800148449838, 0.00026724376948550344, 0.00019785940821748227, 0.00065841537434607744, 0.00037288462044671178, 0.00024218250473495573, 0.0002395658812019974, 0.00026657187845557928, 0.00011753868602681905, 8.7792766862548888e-05, 0.00016850874817464501, 0.0001607283775229007, 0.00016938276530709118, 0.00014062674017623067, 0.00011747313692467287, 0.00013608987501356751, 0.00023724827042315155, 0.00045025866711512208, 0.00015035137766972184, 0.00011887298751389608, 0.00039295523311011493, 0.00022735360835213214, 0.00020413515449035913, 0.00034256814979016781, 0.0005002245306968689, 0.00029997405363246799, 0.00016482819046359509, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -15,106,-3,-127,-50,-32,-49,-50,-31,11,-7,62,10,-47,-23,55, 
  /* [1][0][][] */ -27,38,-63,3,-35,-30,26,-82,69,40,-62,10,4,0,40,-127, 
  /* [2][0][][] */ 17,19,-58,26,54,10,-81,-58,127,-11,-12,13,-45,114,-94,33, 
  /* [3][0][][] */ 39,-59,6,-101,0,-29,-26,-3,123,-10,89,56,-27,59,13,127, 
  /* [4][0][][] */ -60,60,-12,6,-7,-27,-19,41,-6,12,10,-17,-127,-4,-25,41, 
  /* [5][0][][] */ 10,60,103,-5,16,67,-70,86,-63,79,-35,-41,48,-49,-127,32, 
  /* [6][0][][] */ 55,-71,117,-127,40,-8,-33,101,-76,-105,40,-54,18,76,-33,105, 
  /* [7][0][][] */ 30,118,-30,-56,86,18,1,-52,127,98,-21,25,24,-18,63,39, 
  /* [8][0][][] */ 19,-91,16,-89,27,-59,25,-67,21,63,64,-14,18,127,74,63, 
  /* [9][0][][] */ 5,-27,-4,127,38,-5,40,-62,-54,103,33,-22,-4,-61,-5,-12, 
  /* [10][0][][] */ -6,20,-50,-127,14,-4,-15,40,19,-22,12,-25,-24,-37,-7,31, 
  /* [11][0][][] */ 8,10,38,-11,84,-31,101,-52,-89,37,-8,22,1,127,-76,-21, 
  /* [12][0][][] */ 81,-33,-115,4,36,-73,33,48,-2,61,-111,-82,-29,127,5,49, 
  /* [13][0][][] */ -11,4,-24,7,4,-127,0,19,2,-7,2,-5,13,-14,7,15, 
  /* [14][0][][] */ 13,-18,88,-34,57,17,-127,-110,-6,-40,48,36,-1,-45,-4,-53, 
  /* [15][0][][] */ -79,18,-41,-73,-9,-1,127,53,-39,47,77,-23,11,78,64,3, 
  /* [16][0][][] */ 26,48,127,86,-1,16,110,75,-87,16,-80,-15,25,-1,4,-75, 
  /* [17][0][][] */ -33,-109,-10,26,-65,-26,-51,19,-127,-23,8,-50,-4,40,54,-31, 
  /* [18][0][][] */ -1,45,12,70,43,11,11,-4,77,44,-24,-25,6,127,61,14, 
  /* [19][0][][] */ 23,-28,26,0,101,7,-90,-53,-104,-65,-46,-127,-33,-35,2,-24, 
  /* [20][0][][] */ 110,-22,-50,-24,21,-111,26,40,-45,47,-127,-33,15,15,14,19, 
  /* [21][0][][] */ 89,-46,54,-47,-25,-10,-28,110,-13,-113,81,46,-11,127,46,101, 
  /* [22][0][][] */ -7,41,-33,127,-40,-2,101,82,-21,54,-27,29,-11,13,19,11, 
  /* [23][0][][] */ 70,22,93,-104,44,-3,-2,54,-5,35,-12,-21,-5,-14,-127,27, 
  /* [24][0][][] */ -127,46,3,-27,-3,98,29,-27,-8,4,103,-13,-79,24,52,-17, 
  /* [25][0][][] */ 30,19,11,19,6,5,74,-47,-9,-127,-20,-25,-4,-28,7,26, 
  /* [26][0][][] */ -39,-1,1,8,-48,-4,-41,-35,-99,-39,7,-28,6,127,-27,46, 
  /* [27][0][][] */ -1,25,10,71,41,-34,-12,-31,57,7,-32,-5,11,127,-11,19, 
  /* [28][0][][] */ 6,73,64,67,127,-1,27,29,-78,-30,-41,-27,21,93,49,-41, 
  /* [29][0][][] */ 4,-10,6,15,20,-6,16,45,-16,-10,-23,-127,8,-12,-11,11, 
  /* [30][0][][] */ -25,81,-55,70,-42,-13,35,-127,-39,59,-10,3,52,33,81,77, 
  /* [31][0][][] */ -45,-14,-19,-79,-11,6,-56,-115,29,77,-6,-127,-34,-53,9,16, 
  /* [32][0][][] */ -127,-82,0,70,56,33,-2,15,-11,-51,-120,38,78,4,55,82, 
  /* [33][0][][] */ -5,-47,-43,-9,-90,-15,-81,4,61,29,7,-56,29,-127,120,38, 
  /* [34][0][][] */ 50,-13,61,24,45,12,-39,84,-82,-45,59,14,21,-10,-20,127, 
  /* [35][0][][] */ -39,56,-73,26,-7,-28,34,-115,87,101,-92,-2,6,-11,79,-127, 
  /* [36][0][][] */ -21,19,30,125,33,19,127,22,-2,9,-35,-25,21,6,-53,-39, 
  /* [37][0][][] */ 10,-13,18,-59,2,-3,-24,-46,-69,-23,-5,-14,6,-127,51,-25, 
  /* [38][0][][] */ 42,94,-15,-56,127,1,39,-41,114,76,-15,-2,14,-29,46,16, 
  /* [39][0][][] */ -19,62,-18,-127,-11,2,-49,34,35,-58,-28,-19,5,67,36,28, 
  /* [40][0][][] */ 7,-21,38,-78,1,-6,-4,-40,-108,-27,-11,-23,-8,-127,93,-65, 
  /* [41][0][][] */ -2,-12,-40,-9,4,-36,18,-2,-35,9,-58,-15,-127,7,19,41, 
  /* [42][0][][] */ 127,87,-34,-25,-68,-55,-25,-40,-11,36,73,-57,-63,51,85,-98, 
  /* [43][0][][] */ -27,127,-110,-25,58,-20,101,-39,36,120,-38,13,8,-124,-84,-64, 
  /* [44][0][][] */ -24,-11,-12,-43,65,-26,-100,-127,-33,-9,0,-4,-7,-48,29,-65, 
  /* [45][0][][] */ -18,52,-127,-53,14,-60,13,-70,0,40,12,-60,17,-22,48,-25, 
  /* [46][0][][] */ 15,-1,-23,-95,-14,3,17,-20,-127,-12,1,6,-3,-119,56,-26, 
  /* [47][0][][] */ 22,49,24,-14,127,-16,-29,17,-57,39,-3,19,2,4,111,-29, 
  /* [48][0][][] */ -127,-65,-12,43,57,21,19,-22,4,-24,-100,46,59,9,78,43, 
  /* [49][0][][] */ 9,21,91,66,127,5,30,27,-120,-46,-24,-58,-7,115,16,-62, 
  /* [50][0][][] */ 22,-33,-109,-26,18,-127,-54,-23,-24,-21,7,-37,39,-29,-16,9, 
  /* [51][0][][] */ 15,33,40,15,24,-6,8,37,-114,44,-11,-127,21,-96,-22,97, 
  /* [52][0][][] */ -10,50,12,67,45,7,29,27,82,70,-25,-56,55,127,78,17, 
  /* [53][0][][] */ 3,-45,-9,-9,-79,-11,-85,5,47,23,5,-63,20,-127,115,22, 
  /* [54][0][][] */ 50,-5,-50,6,127,84,-127,-51,-90,1,-27,-71,-11,-46,-20,-45, 
  /* [55][0][][] */ 38,-2,12,9,35,-31,-71,-127,-25,-75,-48,16,-11,-32,18,-13, 
  /* [56][0][][] */ -14,11,22,-26,-4,-31,-92,75,-15,127,-9,-21,28,3,-11,14, 
  /* [57][0][][] */ 4,18,-54,-29,-52,-63,127,102,-37,38,-19,-9,23,32,121,-1, 
  /* [58][0][][] */ 42,40,-127,44,93,117,-41,54,-110,-52,6,13,-47,35,4,-34, 
  /* [59][0][][] */ -92,59,119,32,-71,-60,127,117,30,-4,27,-21,20,1,72,0, 
  /* [60][0][][] */ 15,-4,-44,7,24,-127,-16,5,-17,-14,-12,-31,25,-8,-6,16, 
  /* [61][0][][] */ 18,-12,17,127,79,24,21,3,-98,1,24,54,-15,25,41,-63, 
  /* [62][0][][] */ -42,127,23,-56,-33,-18,-62,71,-28,-64,-102,-70,1,-89,-61,-29, 
  /* [63][0][][] */ -40,23,-29,127,-76,8,-65,-30,-69,-23,-32,-48,31,70,35,49, 
  /* [64][0][][] */ 4,6,7,43,0,15,-17,53,28,4,-10,-36,-14,-127,48,-8, 
  /* [65][0][][] */ -20,-43,11,-127,40,-30,59,-35,-9,42,13,-101,-17,1,20,-43, 
  /* [66][0][][] */ 21,-9,83,-21,-11,20,-27,100,29,-103,68,55,2,127,34,69, 
  /* [67][0][][] */ -3,57,-27,-127,-17,-2,-63,33,68,-75,-24,1,14,76,63,29, 
  /* [68][0][][] */ -37,33,127,15,11,16,-9,-4,-28,-21,-6,-23,6,-17,95,-45, 
  /* [69][0][][] */ 127,86,-5,-1,-81,-30,-34,-30,-3,27,88,-53,-73,60,64,-95, 
  /* [70][0][][] */ 50,5,-68,-21,-17,20,46,127,-43,108,-45,1,13,59,-34,29, 
  /* [71][0][][] */ 11,-5,-5,14,3,-83,10,22,-34,11,-89,-2,-127,0,47,55, 
  /* [72][0][][] */ 19,20,-127,19,8,10,39,111,-51,-24,-4,-19,22,18,-14,17, 
  /* [73][0][][] */ -47,25,57,12,59,-36,-86,-127,26,-77,34,-19,12,-48,37,-18, 
  /* [74][0][][] */ 6,26,43,127,20,-12,-65,88,-76,20,-58,30,34,-116,28,-82, 
  /* [75][0][][] */ -2,20,-40,20,22,-14,33,-10,116,25,-27,-18,18,127,-52,14, 
  /* [76][0][][] */ -6,-12,2,24,5,-8,-14,62,20,-34,-15,-127,-6,-5,8,5, 
  /* [77][0][][] */ 0,23,-6,127,-42,11,85,104,3,50,-19,26,-16,-11,-20,-3, 
  /* [78][0][][] */ 22,-20,36,-122,60,-48,-23,56,19,-46,-8,-62,39,127,9,69, 
  /* [79][0][][] */ -3,-91,-100,-75,-96,-20,9,-71,127,2,19,38,30,52,28,-32, 
  /* [80][0][][] */ -19,-7,92,-96,28,-56,17,-82,-84,78,-63,-127,16,101,67,-27, 
  /* [81][0][][] */ -43,47,-125,34,75,-127,-10,56,1,-51,61,-6,27,1,10,-3, 
  /* [82][0][][] */ 127,-6,-10,10,15,-121,-28,11,-19,-11,-95,4,108,12,-13,17, 
  /* [83][0][][] */ -37,86,-127,-99,-36,-20,37,-124,57,58,-47,-121,8,57,47,103, 
  /* [84][0][][] */ -36,25,98,-4,12,-24,70,-127,-25,27,-9,-64,32,49,72,-12, 
  /* [85][0][][] */ -71,127,39,-107,-69,-33,-21,6,-61,-3,-79,12,3,-11,-97,-21, 
  /* [86][0][][] */ -4,11,-50,-9,-34,-41,127,29,-7,-15,-3,10,-1,34,88,-17, 
  /* [87][0][][] */ -29,-39,-6,-127,5,-31,50,-22,-1,24,-4,-119,-17,-3,15,-47, 
  /* [88][0][][] */ 88,-35,24,-22,7,-88,18,32,-36,45,-127,-69,34,13,57,22, 
  /* [89][0][][] */ 17,-21,-38,-42,18,-8,-19,-12,-40,-3,35,-60,127,-10,31,-44, 
  /* [90][0][][] */ -7,-45,41,-54,61,5,-66,81,62,-87,-31,-20,-6,112,26,-127, 
  /* [91][0][][] */ -39,-8,-23,-48,11,-23,-35,-88,-5,60,-15,-127,-33,-11,-3,18, 
  /* [92][0][][] */ -26,28,34,14,-1,-127,6,-2,4,-25,5,-8,1,-21,22,0, 
  /* [93][0][][] */ 33,-14,127,-6,-51,58,24,-30,-17,20,-64,-14,-22,-4,33,-1, 
  /* [94][0][][] */ 22,3,-16,-27,20,0,-13,-8,-37,-12,19,-52,127,-20,33,-34, 
  /* [95][0][][] */ 127,92,22,60,-85,-1,-69,9,-25,-31,102,-31,-70,30,87,-86, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00074713863432407379, 0.00099355820566415787, 0.00076731585431843996, 0.0010786557104438543, 0.0010124340187758207, 0.0013088596751913428, 0.00039589879452250898, 0.00078312732512131333, 0.00070402608253061771, 0.0011001622769981623, 0.00054830691078677773, 0.00065217132214456797, 0.00069286749931052327, 0.0034955251030623913, 0.00062317703850567341, 0.00034165158285759389, 0.00035146417212672532, 0.0007340672891587019, 0.0012571958359330893, 0.001037458423525095, 0.00033590369275771081, 0.00017615372780710459, 0.00045370945008471608, 0.00029349830583669245, 0.00039767040289007127, 0.0018467695917934179, 0.0015008732443675399, 0.00096526870038360357, 0.00050248607294633985, 0.0012687899870797992, 0.00060457491781562567, 0.00058858882403001189, 0.00052894582040607929, 0.00058133609127253294, 0.00074803229654207826, 0.00054234993876889348, 0.00065872486447915435, 0.00072682206518948078, 0.00080624100519344211, 0.0010278502013534307, 0.00052649190183728933, 0.0015313824405893683, 0.00094991590594872832, 0.00041589621105231345, 0.0012528994120657444, 0.00045367318671196699, 0.0007811074610799551, 0.00074656371725723147, 0.00087408366380259395, 0.00053148774895817041, 0.00050150352763012052, 0.00057648244546726346, 0.0015644057421013713, 0.00061607640236616135, 0.0010302839800715446, 0.001215938595123589, 0.001568505191244185, 0.00072191102663055062, 0.00087440898641943932, 0.0004724571481347084, 0.0020947516895830631, 0.00094255589647218585, 0.00067181984195485711, 0.0011970334453508258, 0.0014142314903438091, 0.00068549741990864277, 0.00018501940940041095, 0.00066621467703953385, 0.0012465770123526454, 0.0011628690408542752, 0.000800811976660043, 0.0005928975879214704, 0.0019729810301214457, 0.0011173711391165853, 0.0007257143734022975, 0.00071787351043894887, 0.00079879857366904616, 0.00035221170401200652, 0.00026307627558708191, 0.00050494656898081303, 0.00048163221799768507, 0.00050756562268361449, 0.00042139645665884018, 0.00035201528226025403, 0.00040780144627206028, 0.00071092863800004125, 0.001349227037280798, 0.00045053692883811891, 0.00035621001734398305, 0.00117751385550946, 0.00068127870326861739, 0.00061170320259407163, 0.0010265259770676494, 0.0014989527408033609, 0.00089889025548473001, 0.00049391755601391196, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -10466, 8287, -17604, 1840, -8615, 9806, 32094, -54680, -461, 10907, 21540, 13546, -5568, 11184, -5647, 16207, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00080140290083363652, 0.00051195523701608181, 0.00017553793441038579, 0.00026855364558286965, 0.00035685556940734386, 0.00033103523310273886, 0.00034614381729625165, 0.00031138712074607611, 0.00032090322929434478, 0.00024004789884202182, 0.00064759800443425775, 0.00073949916986748576, 0.00058761925902217627, 0.00021655156160704792, 0.00052846962353214622, 0.00056245067389681935, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -20,-9,-2,-34,22,-8,-35,3,18,3,-7,9,-5,-8,-22,10,-6,7,-9,-3,6,-37,0,6,10,19,0,127,36,-32,46,-7,2,7,7,6,-14,9,-45,-1,-14,1,3,43,9,7,13,-1,27,3,-7,12,12,-23,-12,82,2,5,-23,-34,-1,20,2,-22,-35,-58,-21,34,5,7,16,-12,-1,-35,0,-14,-23,18,-2,9,-8,-24,26,24,0,-5,-3,-89,2,-10,4,-2,40,-38,-43,-3, 
  /* [1][0][][] */ 29,-52,-69,-48,127,-4,49,28,-12,-84,-42,-5,8,-2,-57,32,-57,10,43,45,24,28,-7,-54,14,8,-6,-63,31,-19,-59,28,-17,29,0,-4,9,1,4,17,-17,25,-40,1,-46,70,13,6,20,-71,9,-30,-10,27,51,20,-49,-29,-32,-26,16,-12,12,-32,-58,93,-22,-22,3,-12,-23,23,48,-100,-26,11,43,-49,42,9,15,-5,26,15,-42,37,-9,32,26,-28,-6,-4,25,-5,20,107, 
  /* [2][0][][] */ 16,61,-90,-18,78,64,20,77,-16,-99,-6,-32,-2,-5,28,38,22,-30,-50,55,25,-4,65,15,66,18,-11,-32,48,-15,52,-61,40,55,-16,41,-127,-73,30,41,9,-48,15,-29,24,-26,13,75,-33,28,-33,-12,68,-5,-19,60,23,18,39,0,32,19,33,-36,5,-1,-46,13,-57,-10,-12,-48,-43,-80,16,72,54,53,20,-2,27,-46,-10,-17,-33,25,8,25,-30,38,10,-12,-7,-33,-68,-23, 
  /* [3][0][][] */ 68,5,114,-4,44,-42,17,-29,-32,-63,15,-69,-5,-13,42,101,27,-13,48,8,116,10,51,10,30,-49,-18,40,13,35,-13,82,-98,24,29,-16,-19,-26,3,52,-97,-12,75,-1,25,55,-40,-78,-68,-39,-47,38,-17,-116,-3,29,-109,83,44,32,18,107,-29,-71,22,58,-7,-46,5,-39,-4,-67,27,-23,56,-19,0,7,57,54,-43,-118,21,-29,-39,-4,3,39,15,9,17,46,32,127,38,-53, 
  /* [4][0][][] */ 31,-7,14,-16,127,27,-3,-14,-43,-42,-40,-26,-53,27,-11,59,24,-85,-22,71,-20,4,22,-20,15,-11,8,-44,15,-9,57,-33,89,15,-17,15,24,21,3,9,-23,-11,-22,-31,5,-41,-3,8,39,15,-30,12,-15,-37,11,-29,19,-14,-26,19,4,48,62,24,32,48,-25,-6,-41,-4,38,65,23,-65,-38,-24,24,34,70,-25,-4,-29,-1,-13,-60,16,33,46,-52,36,5,-33,3,19,36,-31, 
  /* [5][0][][] */ 8,-17,-21,2,23,-27,45,-20,-16,-43,-14,13,9,30,5,18,-5,-2,4,-13,43,1,-51,78,34,2,8,-106,6,32,9,35,-4,4,12,-58,38,35,-10,13,-2,-18,25,-15,5,9,8,-17,-17,-16,14,-11,-11,-33,-16,-40,-12,23,-26,12,65,8,-3,48,3,64,5,79,-3,89,24,34,22,20,-4,79,-37,-6,11,6,-6,-7,-3,28,-4,16,-16,127,-1,34,2,-8,-5,9,-53,22, 
  /* [6][0][][] */ 27,-91,25,-44,-30,12,36,25,0,-1,-12,-73,-28,-11,-33,14,18,-9,-5,-6,-51,43,18,12,-35,1,-15,-13,-26,18,39,-7,64,3,64,-16,-9,-18,24,-92,-24,98,4,-43,21,-13,-19,17,-8,34,-28,68,-15,-59,-15,-9,1,-60,-12,6,-12,59,39,-73,29,-33,1,-24,-4,-2,127,3,-39,14,-27,32,-93,-12,19,8,27,29,22,-2,-24,2,43,24,2,9,46,-41,-15,6,-45,-26, 
  /* [7][0][][] */ 8,127,60,25,105,61,40,-43,-35,-28,37,-25,-36,11,28,19,10,-35,14,42,14,-20,56,-2,-30,10,17,27,10,-18,14,15,44,-10,-53,0,20,-8,-2,85,-62,43,14,16,-22,-26,24,-18,-33,-38,28,1,22,-29,-30,48,56,12,-23,5,-10,-39,-17,-16,-62,68,-31,-93,-18,-36,-7,64,-29,-20,7,8,62,63,51,-19,-56,-59,-11,-14,-25,43,-5,-9,-56,24,-46,-44,-45,-6,-6,-13, 
  /* [8][0][][] */ 5,-13,46,9,-119,-38,38,-8,30,88,56,17,-4,28,24,17,-44,4,2,-16,-19,-12,-127,73,37,-41,59,-26,19,14,-4,45,59,-5,4,-3,-21,-2,10,28,25,-44,44,5,-31,14,38,4,-97,20,20,33,-50,-53,-31,55,8,-51,-82,-26,8,-34,-25,7,9,79,-16,-46,22,-18,-40,-19,50,53,63,-4,-30,-48,-19,13,-79,33,-22,2,33,33,56,45,30,-34,44,53,-3,-7,61,3, 
  /* [9][0][][] */ 15,-113,-7,24,100,90,-23,-22,27,-33,93,91,-32,6,113,-98,16,-29,-9,40,-71,-58,41,-12,-39,32,-25,49,-29,17,24,-4,22,9,-105,31,5,3,-28,78,17,-65,-12,69,-2,-29,-82,-46,35,27,-9,-92,51,39,-9,-54,9,86,-26,11,35,-49,-35,127,-105,-7,-4,-17,-19,34,-61,-81,48,-9,-4,18,75,-59,24,11,1,-47,-8,27,-10,-86,39,-13,-11,-37,-48,33,-49,-10,-37,-54, 
  /* [10][0][][] */ -46,-21,-36,-46,-16,-11,59,-16,37,19,21,42,31,3,-6,-4,-9,22,-36,-29,7,17,2,26,8,-8,13,-127,31,-42,45,-32,1,22,-1,-3,-4,38,7,-10,21,-45,16,-42,14,-2,22,22,-2,39,-23,-8,-28,-32,-4,-42,16,12,-11,-36,14,11,9,18,-25,85,-12,-25,15,-22,7,-15,-18,-11,17,55,-5,40,-21,5,-16,20,5,34,17,-6,-5,114,7,-3,10,9,17,-50,49,-30, 
  /* [11][0][][] */ -83,19,-2,-8,26,-69,-18,5,-53,1,-6,28,34,41,-36,-2,50,-3,-73,-61,34,-15,-15,5,94,0,74,-8,-13,24,-49,20,-7,28,-10,-10,-4,16,34,5,-7,-14,1,4,89,35,77,28,45,41,-11,40,24,-71,30,1,-69,-24,-41,-46,-17,-11,8,39,1,-25,25,10,25,14,0,30,-19,8,25,-2,-17,79,-127,68,-35,20,-76,-68,125,27,45,-10,22,45,-30,-59,-20,45,-17,-5, 
  /* [12][0][][] */ -5,-10,-29,1,50,17,-6,-24,-10,13,24,-14,3,-35,33,-7,-25,-6,11,-18,0,-5,-39,47,-28,16,-22,86,-22,30,-27,-1,-17,24,3,26,-9,-13,15,-3,-2,-11,-3,-10,-18,9,23,28,-12,-1,7,-29,-18,10,-11,-16,-9,-2,19,13,-14,-20,-9,37,30,-75,15,46,-31,-127,-9,36,1,13,6,70,-3,-6,-3,1,-3,-3,-27,-9,11,-14,-7,-57,-2,12,9,8,-40,47,-3,17, 
  /* [13][0][][] */ -76,67,-1,-11,-55,9,-2,5,-47,-26,41,12,87,1,-21,10,-22,23,-52,-2,6,3,59,-69,60,38,-4,7,16,-21,-29,-88,-87,-26,-2,-4,-6,12,24,-3,-46,85,2,3,42,-18,-14,-8,67,-20,26,59,62,-57,74,-16,-17,47,49,12,22,36,-16,15,-15,-20,-7,2,13,20,20,-127,10,-36,-65,9,54,27,-45,-42,78,-42,-6,-35,34,-30,94,2,-47,1,-25,26,46,-48,-33,0, 
  /* [14][0][][] */ -25,21,-19,-54,39,-3,-7,32,-87,0,20,17,-16,-45,-76,-22,-92,-16,52,4,30,-10,8,-97,-26,16,-47,-26,19,-17,-13,-25,-68,-19,17,11,-16,1,5,3,4,70,-64,-9,-39,22,0,7,127,-24,23,-8,32,49,-106,17,-28,20,-93,11,3,26,37,35,3,33,-7,2,-43,20,54,36,41,-15,-19,21,47,-80,-32,-98,11,-21,10,39,35,-57,-37,12,-25,26,30,51,14,28,23,-11, 
  /* [15][0][][] */ -36,-79,2,-19,-5,17,-10,-67,-29,17,-9,-39,24,-24,45,-18,-88,-5,-7,23,-30,22,-49,-51,-34,-7,-2,22,-36,-13,66,-89,-6,18,17,2,-10,5,-91,10,17,-49,-4,19,-29,-46,46,20,44,12,-15,-127,-3,49,6,30,39,-8,-10,39,12,1,31,-16,-11,-18,-15,-13,-21,20,3,34,-48,12,-1,-37,-27,-2,11,6,-13,15,-4,56,-22,-51,-33,-36,-56,45,21,73,-30,11,-17,-20, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.034059621393680573, 0.021758096292614937, 0.0074603622779250145, 0.011413529515266418, 0.015166360884904861, 0.014068996533751488, 0.014711111783981323, 0.013233952224254608, 0.013638386502861977, 0.010202035307884216, 0.027522914111614227, 0.031428713351488113, 0.02497381903231144, 0.0092034414410591125, 0.022459957748651505, 0.023904154077172279, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 13566, 73326, -351, -671, 15266, -7046, -357, 225, 6379, 9790, -4043, 190, 496, 4253, 4468, -9301, -4128, 488, -362, 10732, -10933, 16051, -1682, 8850, 32987, 768, -7230, 17552, 16262, -20109, 2050, 21612, 23335, -10030, 2276, 154, -512, -28, 2910, -7167, -4649, -1555, -7682, 56, 29726, -1081, 12421, -1010, -14558, 1557, 127, 265, -3848, 16984, -3836, 13701, 25356, 137, 35908, 107, -9405, -700, 1301, 126, -2782, 13484, -1595, -5363, -3656, 3801, 626, -2437, 2099, 745, -2449, -5733, 969, -1907, 33490, -7320, -5827, -10675, -36, 427, 48786, -13892, -10869, -27236, -7189, 9704, -2542, 35540, -737, -2001, -2830, 242, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00018075776461046189, 7.706437463639304e-05, 0.00011109016486443579, 0.00019508169498294592, 0.0002220280293840915, 0.00011018115765182301, 5.595706170424819e-05, 8.5100458818487823e-05, 0.0002481210685800761, 0.00025151041336357594, 0.0002322059590369463, 0.00010678955732146278, 0.00031755145755596459, 0.00020013478933833539, 0.00042384618427604437, 0.00016234001668635756, 0.0002041900297626853, 0.00018965567869599909, 0.00016144316759891808, 0.00010360225132899359, 6.9534587964881212e-05, 5.1521274144761264e-05, 0.0001375771826133132, 8.4130886534694582e-05, 8.8775166659615934e-05, 0.00015732523752376437, 0.00015073994291014969, 0.00017020410450641066, 8.2011480117216706e-05, 0.00045159258297644556, 0.00038205744931474328, 0.00024394295178353786, 0.00011703730706358328, 0.00015878290287218988, 0.00024303147802129388, 0.00047093603643588722, 0.00042917352402582765, 0.0002637883007992059, 0.00021746844868175685, 0.00011653978435788304, 0.00022570260625798255, 0.00020190241048112512, 0.00034820521250367165, 0.0001040222923620604, 0.00037010447704233229, 9.4126306066755205e-05, 0.00011081640695920214, 0.00034546171082183719, 0.00071782607119530439, 0.00012303830590099096, 0.00035560608375817537, 0.00015226684627123177, 0.00012457159755285829, 0.00016429145762231201, 0.00022119922505225986, 0.00012756681826431304, 0.00010676519741537049, 0.00052266509737819433, 4.8385387344751507e-05, 0.00017032353207468987, 0.00030516102560795844, 0.00031119547202251852, 0.00010721634316723794, 0.00015939243894536048, 0.00011657586583169177, 0.00013506303366739303, 0.00024818661040626466, 0.00041752387187443674, 0.00020337467140052468, 0.00010605590796330944, 0.00021724955877289176, 9.3955342890694737e-05, 0.00024831734481267631, 0.00013580612721852958, 0.00031697878148406744, 0.00033095097751356661, 0.00010254669177811593, 8.8768043497111648e-05, 7.8200901043601334e-05, 0.00018199793703388423, 0.00022332162188831717, 0.00023395421158056706, 0.00016051341663114727, 0.00030884589068591595, 7.1949012635741383e-05, 0.000103009857411962, 8.0448458902537823e-05, 0.00048846815479919314, 0.00024867570027709007, 0.00012952151882927865, 0.00033608879311941564, 3.0445904485532083e-05, 0.00016331339429598302, 0.00010793186083901674, 0.00032719731098040938, 0.00031273180502466857, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-72,-8,127,21,72,75,-59,-15,-18,-15,-2,-29,1,37,1,-9,-43,28,20,20,-127,127,4,-77,5,50,-29,-122,-127,38,26,13,26,61,-19,-29,-10,28,-10,-15,28,-109,69,25,-71,37,46,-18,51,-25,20,5,-7,15,49,-93,-49,-66,-19,-11,-1,10,38,70,-26,73,14,-8,15,19,127,22,22,26,0,-11,18,127,-6,-15,13,-28,21,125,20,-80,-17,-1,-31,-16,-39,3,-24,-16,26, 127,-127,74,108,-43,127,38,-118,68,4,-18,127,127,-98,-13,15,10,127,127,-111,127,-74,79,68,-127,-118,-65,-34,-57,47,-60,-19,-90,53,-127,-85,-42,-14,-52,62,-2,127,127,82,-52,-117,-115,-50,-16,-127,41,84,70,-30,45,81,-48,42,-80,-113,-44,-42,-61,69,76,-62,28,30,-78,32,-18,91,113,127,15,18,0,59,-34,52,65,127,127,-23,-7,74,-115,127,-121,-98,4,-127,-89,-127,-39,108, -76,-12,30,-82,14,-22,63,-10,79,-35,-28,19,-18,-4,-8,-13,-9,-18,7,-4,-23,-100,29,-3,-120,96,7,-54,112,50,-15,11,2,14,15,-30,-8,34,19,9,23,12,-120,66,18,-20,38,14,-15,10,-17,5,-8,2,-5,20,-66,6,-34,52,2,40,32,0,-5,-39,-30,24,10,2,-4,36,8,-26,-7,3,-12,-5,-87,1,-22,-26,-17,3,-107,9,-34,-23,-47,26,-26,-31,30,-26,-15,3, 
  /* [0][1][][] */ -65,-75,71,-36,-48,94,16,127,-52,-22,-1,-117,27,-118,79,31,-2,-62,-16,88,53,-69,45,52,-98,-11,127,-22,-23,63,121,-104,-127,88,-87,-56,-34,32,-27,95,-51,-25,-6,44,-48,127,-22,65,16,95,19,-2,15,-54,27,30,127,121,-72,-86,127,-33,-36,127,74,-39,-15,0,127,39,127,96,-40,103,-5,15,14,14,-32,10,-44,118,-80,112,4,34,-57,30,82,-127,-32,-7,127,-68,-23,1, 67,126,55,-115,127,82,85,37,-127,127,127,-39,-64,-127,-127,127,127,-66,-122,-49,101,92,-123,127,-113,-92,-43,127,-127,109,-127,-127,-89,127,107,127,127,-127,-103,127,-66,-95,110,-127,-127,-37,-127,-127,127,-111,83,42,127,127,127,-127,101,-127,-127,127,20,-78,-127,-102,-127,127,-127,127,-123,-127,-107,-84,-127,-79,127,127,-127,127,-79,127,127,29,-43,-127,60,127,95,45,127,12,127,1,-66,34,127,-127, -54,-13,-50,38,-56,-94,33,-28,18,-35,-30,90,2,95,15,9,-4,63,-8,127,0,-82,-42,8,-84,105,-71,-20,-70,-17,18,-63,-70,38,5,-18,-27,46,-65,41,127,-4,-39,30,-40,-62,16,45,9,118,-11,6,-36,-71,2,18,97,2,1,21,-34,127,91,-52,-42,12,37,-10,-75,123,-19,-88,-2,-54,-18,-18,27,17,78,-37,-72,-45,55,15,-46,-18,75,22,14,62,-44,20,-42,95,-27,-4, 
  /* [0][2][][] */ -69,1,-3,-21,12,-44,59,24,54,-28,-37,-2,19,18,-26,1,-7,65,6,2,-56,-76,2,-11,-21,-55,34,-69,88,39,24,26,17,-8,-12,-47,-7,37,-2,-5,-17,-6,-69,105,4,30,12,37,-15,-31,11,-20,22,0,8,15,-70,24,-15,14,14,0,-21,-5,-1,-47,-47,16,-32,12,26,27,13,-21,28,6,17,5,-82,-13,-9,-9,17,15,-127,8,12,-44,-57,-49,-27,-48,10,57,-18,-6, 121,32,-127,-34,-71,-22,36,28,-66,-29,-20,-105,-76,117,-12,37,3,-52,-9,-123,91,-45,-39,1,-115,127,-50,20,-37,-20,-10,-5,-62,16,26,5,-21,-28,127,53,10,-13,67,-34,-38,77,-67,-43,-33,-8,-127,-127,-50,-25,1,38,-66,-6,9,38,-8,-18,8,-49,-54,33,63,-21,116,109,-23,-73,11,-59,2,5,98,5,52,21,11,-96,-50,3,4,6,127,39,-62,38,-18,-112,41,80,-10,28, -56,12,-18,27,15,-66,-127,1,-14,-8,-17,5,15,-26,20,-2,-8,-17,4,19,-52,-64,13,-1,12,-98,20,3,-50,-38,-7,16,44,-19,-6,-25,-34,3,43,-46,22,-2,-50,-36,3,64,23,17,-9,-4,10,-9,16,7,-6,-7,-61,-12,3,-40,-12,9,83,-11,35,-2,0,29,3,5,-4,17,-18,15,-1,16,35,2,78,-14,3,-7,-7,-17,75,-1,43,-39,57,39,-17,-54,-7,3,-14,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0076822047121822834, 0.0032752358820289373, 0.0047213318757712841, 0.0082909716293215752, 0.0094361910596489906, 0.0046826992183923721, 0.0023781750351190567, 0.003616769565269351, 0.010545145720243454, 0.010689192451536655, 0.0098687531426548958, 0.004538556095212698, 0.013495936989784241, 0.0085057280957698822, 0.018013462424278259, 0.0068994504399597645, 0.0086780758574604988, 0.0080603659152984619, 0.0068613346666097641, 0.0044030956923961639, 0.002955219941213727, 0.0021896541584283113, 0.0058470303192734718, 0.0035755624994635582, 0.0037729444447904825, 0.0066863223910331726, 0.006406447384506464, 0.0072336741723120213, 0.003485487774014473, 0.019192684441804886, 0.016237441450357437, 0.010367575101554394, 0.004974085371941328, 0.0067482735030353069, 0.010328837670385838, 0.020014781504869461, 0.018239874392747879, 0.011211003176867962, 0.0092424089089035988, 0.0049529406242072582, 0.0095923608168959618, 0.0085808522999286652, 0.014798721298575401, 0.0044209472835063934, 0.015729440376162529, 0.0040003680624067783, 0.0047096973285079002, 0.014682122506201267, 0.030507607385516167, 0.0052291275933384895, 0.015113257803022861, 0.0064713410101830959, 0.0052942926995456219, 0.0069823870435357094, 0.009400966577231884, 0.0054215895943343639, 0.0045375209301710129, 0.022213265299797058, 0.0020563788712024689, 0.0072387498803436756, 0.012969342991709709, 0.013225806877017021, 0.004556694533675909, 0.0067741782404482365, 0.0049544740468263626, 0.0057401787489652634, 0.010547931306064129, 0.017744764685630798, 0.0086434232071042061, 0.0045073758810758591, 0.0092331059277057648, 0.0039931018836796284, 0.01055348664522171, 0.0057717603631317616, 0.01347159780561924, 0.014065416529774666, 0.0043582343496382236, 0.0037726417649537325, 0.0033235382288694382, 0.0077349119819700718, 0.0094911688938736916, 0.0099430540576577187, 0.0068218200467526913, 0.013125949539244175, 0.0030578330624848604, 0.0043779187835752964, 0.0034190595615655184, 0.020759895443916321, 0.010568716563284397, 0.0055046644993126392, 0.014283773489296436, 0.0012939509470015764, 0.0069408193230628967, 0.0045871040783822536, 0.013905885629355907, 0.013291101902723312, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2650, 9852, 18637, 20482, 13668, -2993, -1357, 5068, 25615, -5547, 9716, 3430, 8680, 9715, 30637, 2143, 2109, 10406, 12587, 5135, -318, 351, 9389, -1081, 5388, -6, 10815, 6600, 10509, 40258, 59429, 16130, 7542, -570, 10343, 3181, 1234, 3535, 22039, -1018, 11819, 8827, 58446, -3818, 21000, 8713, 5613, 15624, 58598, 9133, -449, 7676, -2899, -210, -2126, 7618, -312, 17302, 5621, 9092, 4772, 16891, 7000, 6167, 10528, 12415, 5047, -6393, 4869, -2660, 4870, 8414, 17126, 6701, -5647, -5293, 5230, 307, 2709, -1131, 21460, 7483, 4876, 17259, 3256, 344, 9767, 86056, 12387, 14677, 7667, -192, 6023, 8899, 3883, 10748, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00016845364007167518, 0.00014769782137591392, 0.00010056298197014257, 0.00011215803533559665, 0.00021823027054779232, 0.00033322378294542432, 0.00057528383331373334, 0.00032571135670877993, 9.1067915491294116e-05, 0.0002478275855537504, 0.00027851256891153753, 0.00025405775522813201, 0.00014613245730288327, 0.00023789053375367075, 7.6953212555963546e-05, 0.00029276282293722034, 0.0002156869595637545, 0.00011902640108019114, 0.00017442286480218172, 0.00022703697322867811, 0.00030607753433287144, 0.00060930853942409158, 0.0002091770147671923, 0.0006057333666831255, 0.00049394613597542048, 0.00025443601771257818, 0.00020543699793051928, 0.00020866468548774719, 0.00016188557492569089, 8.7054708274081349e-05, 4.765513222082518e-05, 0.0001544807746540755, 0.00022198798251338303, 0.00037277888623066247, 0.00019366148626431823, 0.0001753725518938154, 0.00040718290256336331, 0.00041077032801695168, 0.00012223581143189222, 0.00055744504788890481, 0.00015831952623557299, 0.00017873680917546153, 4.6370460040634498e-05, 0.00028753906372003257, 0.00015378787065856159, 0.00017698424926493317, 0.00030703097581863403, 0.0001727865164866671, 7.0521389716304839e-05, 0.00023342212080024183, 0.00028066526283510029, 0.00022909704421181232, 0.00035029681748710573, 0.00022255467774812132, 0.00049275771016255021, 0.00014849298167973757, 0.00030648295069113374, 0.00010878413013415411, 0.00036738213384523988, 0.00016520776262041181, 0.0003394581435713917, 8.4151106420904398e-05, 0.00021319011284504086, 0.00016395551210734993, 0.00023608181800227612, 0.00015532664838247001, 0.00025477423332631588, 0.00020710955141112208, 0.00033822943805716932, 0.00028373507666401565, 0.00023003602109383792, 0.00018442372675053775, 0.00012138945749029517, 0.00015290334704332054, 0.00027153361588716507, 0.00025873040431179106, 0.00032094240305013955, 0.00035102898254990578, 0.00028332584770396352, 0.00033611251274123788, 9.6493378805462271e-05, 0.0002165685873478651, 0.00017899046360980719, 0.00011229594383621588, 0.00035818599280901253, 0.00022133451420813799, 0.0002437787625240162, 4.4991520553594455e-05, 0.00011607251508394256, 0.00015527202049270272, 0.00016832597611937672, 0.00036046758759766817, 0.00024164532078430057, 0.00017439044313505292, 0.00028784314054064453, 0.0001568966981722042, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 38,70,-34,71,38,16,7,9,22,48,-89,107,15,-127,22,-93, 
  /* [1][0][][] */ 26,58,-14,-25,37,-27,127,-122,2,81,-19,-8,14,-58,28,6, 
  /* [2][0][][] */ -127,53,-58,-21,-17,-26,93,114,-74,92,97,-42,-92,-6,40,-34, 
  /* [3][0][][] */ -88,59,28,57,-50,41,102,127,-1,99,-106,4,18,-72,-72,-66, 
  /* [4][0][][] */ 7,-8,35,74,-33,84,9,26,-1,-39,-9,2,29,-15,-127,-24, 
  /* [5][0][][] */ -22,-44,66,-7,10,-33,15,50,-58,116,-33,-127,-18,33,-48,-23, 
  /* [6][0][][] */ 10,-4,22,-19,37,44,-46,-59,-20,-1,29,-15,127,-9,-15,-21, 
  /* [7][0][][] */ 28,28,127,-7,-37,-37,21,6,-92,36,-105,-43,3,-1,11,-2, 
  /* [8][0][][] */ 21,32,78,61,-40,82,22,50,43,-9,10,-63,-31,0,-127,-84, 
  /* [9][0][][] */ 29,-127,64,76,10,-30,2,44,111,-6,76,11,-34,12,-120,-34, 
  /* [10][0][][] */ -45,-80,-13,-44,-106,-5,-10,30,72,127,59,-38,-28,34,88,-8, 
  /* [11][0][][] */ -21,-3,37,-69,18,-46,-93,-91,-51,30,-19,-14,41,0,49,-127, 
  /* [12][0][][] */ -23,10,38,-25,-14,-29,-69,-5,-55,-60,-14,31,22,127,88,17, 
  /* [13][0][][] */ -20,-122,-42,37,6,-44,-3,-18,62,6,-15,-19,30,24,127,26, 
  /* [14][0][][] */ -35,-74,44,44,37,42,-4,127,31,79,24,-56,7,53,-67,109, 
  /* [15][0][][] */ 25,-33,8,70,18,-5,105,9,5,-127,9,-35,5,-13,-15,-32, 
  /* [16][0][][] */ 48,-85,-39,32,14,-6,40,-64,126,61,91,-1,19,113,58,127, 
  /* [17][0][][] */ -75,-49,79,120,127,93,22,-33,121,-78,10,-46,-2,55,-127,25, 
  /* [18][0][][] */ -14,17,-12,15,-108,-12,-6,45,-89,-17,-21,-68,-12,-127,45,6, 
  /* [19][0][][] */ 34,-87,40,-43,63,2,-74,73,43,-41,63,21,-31,67,10,127, 
  /* [20][0][][] */ 41,-24,59,-71,3,2,-33,38,-11,-34,105,-9,9,5,-30,127, 
  /* [21][0][][] */ -77,-15,13,-39,22,14,-75,-55,-13,67,15,0,-127,-6,36,-6, 
  /* [22][0][][] */ 22,-31,23,-16,6,-78,13,-2,-127,36,-4,-62,-25,-6,82,-12, 
  /* [23][0][][] */ 10,4,18,-6,1,3,-14,2,-8,-8,44,-15,127,0,6,-40, 
  /* [24][0][][] */ -3,13,-2,-74,-20,-6,44,-3,-49,9,-23,-127,16,-119,37,17, 
  /* [25][0][][] */ -83,10,-34,2,57,-12,-77,-127,-11,15,-19,-46,-69,-67,7,-25, 
  /* [26][0][][] */ 41,1,62,-98,122,-27,14,3,127,-51,39,-17,-14,78,10,57, 
  /* [27][0][][] */ 89,-29,19,-24,-29,-48,-1,-32,-16,20,-127,29,17,-20,4,34, 
  /* [28][0][][] */ -102,-11,-127,-111,33,-16,61,-61,-9,37,-91,12,60,-11,-52,76, 
  /* [29][0][][] */ -53,-31,-6,127,-3,10,15,-30,-18,14,-82,53,14,-71,25,-33, 
  /* [30][0][][] */ 88,-16,127,-18,39,57,-31,97,-30,-71,62,-62,16,19,-81,81, 
  /* [31][0][][] */ 21,-90,9,-48,-8,-51,2,-39,-11,31,87,9,-11,85,54,127, 
  /* [32][0][][] */ -12,79,-38,37,-127,25,-77,-43,-56,-34,2,53,10,43,35,58, 
  /* [33][0][][] */ 28,-20,29,127,22,3,24,-45,-100,52,65,-25,2,7,13,102, 
  /* [34][0][][] */ 23,-1,17,-6,73,-54,-127,1,-45,101,-33,4,-38,8,-2,-10, 
  /* [35][0][][] */ 114,7,-9,8,37,-127,-24,-34,7,-28,-97,2,102,35,-5,41, 
  /* [36][0][][] */ 31,-21,-127,12,46,28,-26,7,-22,-8,-1,-5,-6,9,-17,3, 
  /* [37][0][][] */ 25,-1,127,-6,-53,30,25,-81,-10,40,-64,37,21,-27,12,-11, 
  /* [38][0][][] */ -127,35,5,35,41,86,12,-36,18,-6,117,6,-30,-3,-10,-44, 
  /* [39][0][][] */ -17,-10,12,28,33,-16,-127,32,20,28,-4,-40,3,-24,3,-1, 
  /* [40][0][][] */ 6,117,-40,127,-2,43,57,38,-88,-29,-30,86,22,41,-63,-33, 
  /* [41][0][][] */ 11,13,-36,-21,-39,-7,127,91,-48,75,-26,-14,8,64,32,-10, 
  /* [42][0][][] */ 46,-71,-21,-4,27,17,-80,109,74,-127,94,59,-44,54,-81,30, 
  /* [43][0][][] */ -49,-25,34,-45,50,24,-116,-127,-14,24,1,-39,-119,-15,23,7, 
  /* [44][0][][] */ 16,-4,-17,-8,0,-27,-8,-51,127,6,13,45,2,75,1,53, 
  /* [45][0][][] */ -43,-57,-12,-75,14,-30,17,57,-14,-44,-25,-6,5,80,-32,127, 
  /* [46][0][][] */ -47,27,-28,86,-86,-13,21,-70,-127,53,-43,-10,-2,23,3,-38, 
  /* [47][0][][] */ -21,-6,-104,127,9,60,10,-21,28,52,49,69,-10,-30,26,-27, 
  /* [48][0][][] */ -3,-15,31,-127,21,-31,-25,7,-39,2,23,-27,-16,63,90,50, 
  /* [49][0][][] */ 13,33,35,56,9,70,-23,-5,-34,-70,-127,-34,-27,-23,-96,-71, 
  /* [50][0][][] */ -5,61,14,-106,50,28,-18,47,127,-8,-21,18,11,-49,27,-39, 
  /* [51][0][][] */ -8,-22,33,-1,54,-32,-41,-127,23,-66,-10,-8,-16,-5,-12,-40, 
  /* [52][0][][] */ 21,7,-1,39,35,-12,-44,114,-88,127,-45,-47,76,99,-5,-31, 
  /* [53][0][][] */ 0,84,7,-83,-46,3,44,-39,-68,-44,-59,52,16,-127,-92,-21, 
  /* [54][0][][] */ 5,7,5,18,38,-32,8,-28,-8,23,-18,-22,0,127,-48,-2, 
  /* [55][0][][] */ -104,127,69,-36,30,-6,-6,19,-62,27,89,-39,-4,-11,103,0, 
  /* [56][0][][] */ 54,-8,22,-78,83,9,0,16,44,-22,33,127,-16,5,65,44, 
  /* [57][0][][] */ -35,-13,14,59,-18,16,26,127,-7,15,10,-40,0,57,8,20, 
  /* [58][0][][] */ 14,127,-5,-108,9,25,-27,16,99,-14,3,78,4,-86,39,48, 
  /* [59][0][][] */ 28,60,55,-107,-23,6,32,-19,8,16,30,-38,-1,-127,-53,6, 
  /* [60][0][][] */ 42,-15,109,-43,-25,127,28,-47,-14,32,-39,-5,19,10,40,-14, 
  /* [61][0][][] */ -36,20,-35,-39,-53,16,117,127,-27,83,-14,2,3,65,15,-43, 
  /* [62][0][][] */ -33,5,-12,2,-80,15,-36,-1,-36,6,-3,-69,3,-127,67,-4, 
  /* [63][0][][] */ 9,-25,15,-80,38,-6,-118,-127,-62,92,-27,13,55,1,22,-69, 
  /* [64][0][][] */ -19,-2,46,60,57,6,-36,-127,31,-97,-9,-24,-9,-30,-8,-17, 
  /* [65][0][][] */ -127,9,24,-70,13,80,55,-42,-96,34,48,-26,-8,26,-27,-26, 
  /* [66][0][][] */ 47,16,77,-4,-67,39,11,46,-66,5,64,-107,-26,47,-127,-11, 
  /* [67][0][][] */ 29,-21,-30,66,65,-39,-81,-108,32,-127,-64,-23,-99,10,-90,16, 
  /* [68][0][][] */ -2,-31,-53,54,-37,-72,-8,-50,-22,-15,45,-60,-25,27,127,-15, 
  /* [69][0][][] */ -39,48,-82,60,8,-127,32,50,3,25,67,3,99,8,-3,-4, 
  /* [70][0][][] */ 12,5,-48,-35,-42,2,127,89,-24,53,-22,9,15,37,14,-7, 
  /* [71][0][][] */ 8,-6,-37,-49,17,2,15,42,-26,-29,-20,-1,-3,-127,68,11, 
  /* [72][0][][] */ 33,18,-11,31,37,-48,-42,-127,16,57,-41,29,67,53,55,31, 
  /* [73][0][][] */ -54,-127,-32,-81,-106,-1,47,-40,-24,30,-38,-29,14,-58,83,-15, 
  /* [74][0][][] */ -37,25,65,119,-1,6,-127,96,31,-30,-37,-44,-3,-6,-7,-5, 
  /* [75][0][][] */ -51,40,-47,14,-44,85,84,127,-29,74,-2,-5,-120,50,21,-3, 
  /* [76][0][][] */ 12,-18,-28,-28,38,-70,-127,-81,-10,-21,8,-14,40,12,46,-19, 
  /* [77][0][][] */ -33,6,-29,-20,-48,-10,-14,-41,127,4,-68,5,-5,51,17,-81, 
  /* [78][0][][] */ -78,-127,-23,97,52,63,-22,66,-2,-64,-107,56,39,-4,64,67, 
  /* [79][0][][] */ 37,-12,29,-63,127,1,61,16,78,26,-2,32,-9,-25,7,-38, 
  /* [80][0][][] */ -5,-26,83,-102,-4,-13,14,14,-50,-48,-11,-44,27,127,-33,29, 
  /* [81][0][][] */ 41,18,-7,-2,-17,21,-5,0,-15,-3,-18,-32,-9,39,-127,16, 
  /* [82][0][][] */ -77,-18,36,-127,13,-29,-12,-58,-2,-33,-12,-66,0,-116,-80,10, 
  /* [83][0][][] */ 5,12,-34,-72,-43,12,1,39,-83,14,9,-94,13,-127,3,55, 
  /* [84][0][][] */ 127,29,25,40,-43,6,-53,36,-8,-13,78,-17,-64,24,42,-62, 
  /* [85][0][][] */ -5,-24,15,-31,44,-9,-51,108,-78,-104,-64,-31,-15,76,93,-127, 
  /* [86][0][][] */ 28,-2,19,14,-66,72,-49,87,-91,-78,34,-43,-18,-127,-30,31, 
  /* [87][0][][] */ 127,-53,1,-16,-43,-53,-8,-13,-3,5,-116,4,41,-14,2,39, 
  /* [88][0][][] */ 54,94,-25,2,-44,-127,-75,27,126,1,11,-3,5,3,121,-121, 
  /* [89][0][][] */ 49,73,-86,-26,-44,-28,21,-73,64,54,33,-31,-48,7,-34,-127, 
  /* [90][0][][] */ -33,-20,8,-83,-86,14,127,-58,120,-127,17,-104,53,-1,-55,0, 
  /* [91][0][][] */ 11,0,-16,-83,-37,-6,29,-36,-51,15,63,49,16,-18,44,127, 
  /* [92][0][][] */ 9,11,-8,15,46,-20,-56,-127,34,-48,-10,-23,-38,-26,-5,-25, 
  /* [93][0][][] */ 70,-12,45,-98,-13,1,-16,50,73,-88,59,-26,-25,127,-44,10, 
  /* [94][0][][] */ -86,47,-108,18,60,-127,-28,13,7,-47,83,-15,-2,-7,-8,-43, 
  /* [95][0][][] */ -40,65,47,-127,10,20,-26,-15,27,-39,-47,-74,4,14,-60,-25, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0005413749604485929, 0.00047467008698731661, 0.00032318852026946843, 0.00036045259912498295, 0.0007013467256911099, 0.0010709119960665703, 0.001848842715844512, 0.0010467686224728823, 0.00029267335776239634, 0.00079646636731922626, 0.00089508149540051818, 0.00081648881314322352, 0.00046963931526988745, 0.00076453073415905237, 0.00024731163284741342, 0.00094087881734594703, 0.00069317303132265806, 0.00038252610829658806, 0.00056055880850180984, 0.00072964961873367429, 0.00098366953898221254, 0.0019581909291446209, 0.00067225145176053047, 0.0019467010861262679, 0.0015874402597546577, 0.00081770448014140129, 0.00066023180261254311, 0.00067060493165627122, 0.00052026659250259399, 0.00027977573336102068, 0.00015315368364099413, 0.00049646908883005381, 0.00071342324372380972, 0.0011980338022112846, 0.00062238774262368679, 0.0005636109272018075, 0.001308601233176887, 0.0013201304245740175, 0.00039284047670662403, 0.0017915124772116542, 0.00050880602793768048, 0.00057442294200882316, 0.00014902501425240189, 0.0009240907384082675, 0.00049424223834648728, 0.00056879059411585331, 0.00098673370666801929, 0.0005552999209612608, 0.00022664107382297516, 0.00075017014751210809, 0.00090199982514604926, 0.0007362702745012939, 0.0011257810983806849, 0.00071524444501847029, 0.0015836207894608378, 0.00047722557792440057, 0.0009849724592640996, 0.00034960958873853087, 0.0011806897819042206, 0.00053094339091330767, 0.0010909478878602386, 0.00027044417220167816, 0.00068514869781211019, 0.00052691891323775053, 0.00075871788430958986, 0.00049918756121769547, 0.00081879139179363847, 0.00066560704726725817, 0.0010869990801438689, 0.00091186555800959468, 0.00073928793426603079, 0.00059269950725138187, 0.00039012049091979861, 0.00049139955081045628, 0.00087265257025137544, 0.00083150569116696715, 0.0010314421961084008, 0.0011281342012807727, 0.0009105504141189158, 0.0010801957687363029, 0.00031010966631583869, 0.00069600640563294291, 0.00057523814029991627, 0.00036089582135900855, 0.0011511353077366948, 0.00071132311131805182, 0.00078345427755266428, 0.00014459338854067028, 0.00037303293356671929, 0.00049901200691238046, 0.00054096471285447478, 0.0011584678431972861, 0.00077659782255068421, 0.00056045461678877473, 0.00092506804503500462, 0.00050423335051164031, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -1273, -2832, -10298, 31665, 27251, 6740, -5785, -5476, 24877, -1054, 32827, 22621, -9974, 13751, 32432, -23316, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00041928928112611175, 0.00027423747815191746, 0.00024964942713268101, 0.00023802983923815191, 0.00036493074730969965, 0.00036387925501912832, 0.00030842333217151463, 0.0004371484974399209, 0.00022272071510087699, 0.00025373269454576075, 0.0004060033243149519, 0.00091205746866762638, 0.00033749948488548398, 0.00049513863632455468, 0.00040627503767609596, 0.00037785217864438891, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -2,22,-13,20,33,72,-26,-27,45,0,1,12,-4,13,21,68,3,-5,-13,-4,92,-47,7,-23,-25,-35,-41,-84,-7,-12,49,45,113,-8,-1,4,4,-26,-18,7,-32,8,15,-24,7,-22,-3,19,-15,28,8,-17,-31,-9,6,-2,33,31,-13,-34,-62,24,-2,-11,6,7,60,3,9,6,4,-30,-69,2,-7,-4,-16,-93,-1,-11,41,-19,-59,-33,24,-17,3,25,-13,-12,9,-21,30,27,-4,127, 
  /* [1][0][][] */ 70,-93,45,76,-12,-43,-7,-55,-19,-91,-15,18,9,-55,-40,-61,-90,-14,22,34,-26,-105,-23,28,127,-59,-56,26,-31,106,-10,73,9,20,-50,24,-30,-26,43,-5,-3,-77,63,-34,-57,5,61,-14,40,31,17,-76,82,-52,37,-4,34,38,-3,-102,37,-58,16,-59,4,-89,44,35,38,55,-27,1,-109,44,-26,64,60,82,11,-39,27,5,-84,43,-72,56,5,72,-41,2,15,21,9,-34,28,8, 
  /* [2][0][][] */ 17,9,-2,-20,15,-14,-3,36,48,-12,8,54,0,8,52,2,6,-12,11,-8,-23,-50,-2,-37,3,-7,-33,31,0,0,96,-55,22,-65,-27,56,22,127,-32,-14,-2,-20,5,30,-36,-41,-62,29,17,33,-20,-26,17,-6,5,-39,-37,-8,3,21,13,9,76,78,7,-65,20,-60,-12,-12,-26,4,-22,-1,-20,23,3,60,3,22,12,82,29,-14,-15,7,16,2,4,9,4,-47,-39,0,7,46, 
  /* [3][0][][] */ -19,-22,-39,37,33,-30,-21,-19,-20,20,7,2,4,-17,41,-11,45,-42,23,9,-19,-15,-9,4,-18,22,-1,-11,25,-61,58,-21,10,-18,-18,44,-6,0,-14,-8,21,-65,17,-30,-6,2,-3,3,-127,39,-27,33,-120,-61,-31,-52,17,-1,-21,53,-10,7,-6,7,-7,-81,-37,29,55,11,-10,28,-29,6,3,-37,-68,-53,33,-27,-5,-12,17,66,38,65,36,4,19,0,-1,-7,-36,-15,1,-37, 
  /* [4][0][][] */ -6,-24,10,-62,9,-22,-51,11,-30,-36,-21,1,12,64,14,3,49,-14,3,7,-10,31,43,7,-4,-8,8,23,8,-16,-9,-16,-24,15,13,12,32,-21,4,-3,9,3,-93,-25,28,-5,-7,-14,0,85,-1,-23,-27,-18,7,-4,-4,-33,22,33,12,13,4,-4,32,-107,22,-23,-51,18,-17,-5,-15,8,-20,31,-18,61,48,12,21,3,127,-36,26,-20,-17,-9,80,19,-1,24,-33,26,-8,-49, 
  /* [5][0][][] */ -11,-7,-11,2,3,-16,10,108,41,-18,-13,-38,-7,25,38,26,-21,-6,-3,-31,-49,-5,-12,-41,16,13,27,82,73,11,56,41,-40,25,0,-5,-50,-43,-20,-7,-44,-19,-7,-3,61,12,10,16,6,21,-7,3,-29,-6,6,4,-27,-22,-1,36,-42,37,-18,-44,3,3,-20,4,-12,15,-2,-11,18,11,-4,2,8,33,6,127,5,-31,31,32,4,-11,22,-23,-4,-13,26,-107,-28,-19,-10,-118, 
  /* [6][0][][] */ -29,-9,-10,-53,-8,-13,-17,12,-4,21,-23,2,34,-69,2,-16,-7,-69,28,12,5,11,-21,32,83,-14,3,-9,21,5,13,-13,-29,1,-30,-2,16,2,20,41,-7,-27,-42,-19,-5,-24,28,-127,23,34,9,13,6,7,-8,-41,41,-2,-6,4,19,17,-1,7,44,70,26,-18,-27,-17,14,-29,4,4,54,-8,-24,28,10,7,-19,-5,64,-33,3,51,18,-21,10,8,-34,0,-25,19,-1,19, 
  /* [7][0][][] */ 16,9,37,-27,-9,6,-15,-28,0,-9,-10,-16,-11,-80,18,8,-1,-32,-12,-10,12,-21,-27,-7,-22,-6,-2,-23,1,8,8,4,-22,2,-10,-21,5,-8,-29,13,11,-9,-24,27,-6,8,-18,69,2,16,-26,-17,-23,0,-10,-54,31,3,-12,3,-13,-2,-22,-4,-15,39,9,-23,-10,-12,5,38,1,-8,-4,2,38,5,1,-20,-4,-32,30,-5,-26,127,-1,-2,-38,-17,0,12,-24,-7,3,10, 
  /* [8][0][][] */ -67,40,-52,7,51,-23,-5,40,14,66,-42,22,5,49,87,-12,-5,41,-86,3,22,30,-43,5,-33,-22,11,28,59,-103,-3,-7,50,10,28,8,-18,37,-39,58,6,7,14,-127,-46,2,60,-11,-61,39,29,59,-116,78,16,-3,3,-33,-12,-15,7,-27,14,21,-37,26,42,-22,-5,4,27,95,-43,31,22,34,-16,-94,-12,-35,18,-10,28,15,-75,0,12,-50,8,25,-33,18,41,-10,-20,-20, 
  /* [9][0][][] */ 31,-58,-27,-48,10,25,-13,18,39,-19,-3,13,-49,-19,10,30,6,12,36,-16,-27,12,-17,-33,32,24,39,-23,-42,-39,-32,6,-17,14,5,17,15,46,-33,19,26,18,-19,-90,21,-8,28,-127,-27,-11,-17,44,-11,9,-6,-1,-49,18,-14,11,19,1,12,30,30,127,37,43,12,-19,18,-20,-2,6,-30,2,67,7,17,11,-29,8,9,-43,9,28,5,8,-61,35,-34,-6,7,13,6,-19, 
  /* [10][0][][] */ 22,44,-23,29,82,-122,0,-40,17,49,50,-3,-10,8,21,-74,11,39,-25,38,-83,-20,-12,-20,-59,-14,-38,54,17,15,-3,41,-11,-8,30,-13,85,-37,-3,-2,-20,64,36,-16,-55,-28,-37,10,-18,-8,-23,-2,-11,-9,-7,-6,7,25,-13,-14,-7,20,-23,21,-3,36,60,25,21,-11,20,47,-66,-22,-70,-7,10,22,-25,-12,33,0,-70,-39,60,-55,108,-5,-16,11,20,-2,79,43,-21,-127, 
  /* [11][0][][] */ 50,32,-30,20,-2,10,53,7,-9,-24,-13,-16,-5,3,37,-2,-14,-8,-94,-10,10,15,2,-17,-42,-21,-12,10,9,19,5,-1,3,7,15,26,9,14,-5,17,-1,29,60,-98,30,-35,6,-9,-127,27,23,-57,24,18,-11,12,-8,-12,10,13,12,-12,-7,12,-50,44,-11,14,16,0,29,20,-53,-20,3,28,-2,-35,-48,6,31,-3,85,47,7,-18,-17,-10,15,15,-16,-1,-5,-1,-24,17, 
  /* [12][0][][] */ -39,-2,5,4,-21,30,13,17,127,13,-19,11,5,12,-32,-42,38,23,7,80,53,40,-16,-19,-2,19,16,-28,-114,1,27,-47,8,-6,-15,-22,16,19,41,-3,-43,-20,8,15,3,33,10,-2,15,0,-40,20,0,3,16,-11,57,-26,19,7,27,-16,23,-1,7,34,-43,-1,2,11,-20,-35,12,5,-71,9,11,3,11,-66,-5,1,47,45,-10,-15,-26,-35,-3,20,2,47,-13,-18,25,3, 
  /* [13][0][][] */ 31,-14,-19,22,25,2,9,-7,-6,0,10,-1,10,-12,5,-15,15,-67,-28,6,-11,-22,10,3,5,6,-1,-9,-7,-33,-2,14,-3,-3,5,45,18,-3,4,14,4,12,15,33,13,18,-13,-127,24,2,-1,3,-12,-9,12,3,-6,16,17,7,2,14,-12,7,-9,-20,-21,-52,7,9,-4,-28,-8,37,-9,13,-28,-1,8,4,20,-11,-16,12,17,27,8,14,-2,-6,15,-7,1,12,-11,-9, 
  /* [14][0][][] */ -113,-58,27,47,40,-44,-36,9,-28,0,1,8,43,2,-126,-7,75,-15,-12,27,-13,-5,32,31,-106,8,38,-1,-33,-79,-40,0,1,8,36,-57,37,36,6,27,16,36,1,-36,26,127,75,68,-117,60,25,30,-48,-13,49,2,20,-7,72,61,38,59,11,59,-1,-23,-46,47,8,82,-59,-82,-70,6,-16,43,5,51,92,-2,69,9,16,25,46,10,46,37,39,50,74,-5,-6,15,14,-31, 
  /* [15][0][][] */ 82,-8,42,2,-21,77,29,-9,-2,58,2,15,-82,-17,-18,41,3,43,29,-11,26,17,-72,49,5,-5,28,-15,8,39,-53,-84,5,-33,44,-5,37,-37,-59,-112,1,18,7,60,-4,42,-2,-35,104,-59,-62,20,34,-115,48,-115,-4,-44,-3,27,-127,-16,12,27,72,-19,-54,39,-28,59,-9,17,51,20,26,-11,-2,-60,58,5,0,-1,41,87,-31,8,-13,-57,3,-10,58,1,-64,49,40,-2, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017819793894886971, 0.011655093170702457, 0.010610099881887436, 0.010116267949342728, 0.015509556978940964, 0.015464868396520615, 0.013107990846037865, 0.01857881061732769, 0.0094656301662325859, 0.010783638805150986, 0.017255140468478203, 0.038762442767620087, 0.014343728311359882, 0.021043391898274422, 0.017266688868403435, 0.016058716922998428, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10891, -9403, 3153, 55310, -2383, -4221, -11485, 3423, -2695, 1269, 3294, -2000, 2367, -6863, 6206, -4868, -2124, 16808, 25857, 2331, 2296, -2117, -357, 227, 20412, -681, -834, -3269, -6228, -7818, 7715, -9401, -534, -1518, -542, 16112, 2246, -2846, 18164, 761, -498, 2453, -9352, -7588, -9002, 68958, -802, 20602, 31979, -12590, -258, 6734, 8146, -234, -5973, 2172, -13577, 888, 1738, -6274, -1598, -825, -11702, 3, 1288, 15301, 27897, 29074, -12074, 72, -7556, -835, 42968, 10772, -167, 579, 18420, 32906, -609, -9029, -868, -4623, 986, -3294, 752, -214, 1850, -5, 2096, -3475, 660, -1008, 1199, 256, 123, 51751, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00016782560851424932, 0.0001423257781425491, 0.0002477843954693526, 3.8951162423472852e-05, 0.00016229355242103338, 0.00017174753884319216, 0.00031249044695869088, 7.50826729927212e-05, 0.00014952797209843993, 0.00046277791261672974, 0.00015315873315557837, 0.00028837576974183321, 7.2137423558160663e-05, 0.0003868023632094264, 0.00016522490477655083, 0.00017552223289385438, 0.00010424719948787242, 0.0002792623417917639, 5.9556256019277498e-05, 0.00028073394787497818, 4.7979614464566112e-05, 0.00017704175843391567, 0.00010971753363264725, 0.00035423049121163785, 0.00016620359383523464, 0.00023527961457148194, 0.00013070131535641849, 0.00018971711688209325, 0.00013089162530377507, 8.8898326794151217e-05, 0.00011629726213868707, 0.00016534629685338587, 0.00011435306805651635, 0.00010994762851623818, 0.00020120486442465335, 0.00014921888941898942, 0.00041265500476583838, 0.0001108375217881985, 4.3558666220633313e-05, 0.00013373597175814211, 0.00017512224439997226, 0.00034308133763261139, 0.00035043642856180668, 0.00015949989028740674, 0.00015634005831088871, 5.7866567658493295e-05, 0.00019775751570705324, 0.00016074621817097068, 8.2693361036945134e-05, 0.00017685088096186519, 0.00016787661297712475, 0.00020967915770597756, 0.00020409795979503542, 0.00022522264043800533, 0.0002627192297950387, 0.00036377494689077139, 0.00028668640879914165, 0.0001746802736306563, 0.0001243370643351227, 8.8472646893933415e-05, 0.00029148158500902355, 0.00015678473573643714, 0.00028036319417878985, 0.00012993100972380489, 0.00026478595100343227, 0.00018214731244370341, 8.450652239844203e-05, 6.143874634290114e-05, 0.00033378679654560983, 0.00029349696706049144, 0.00021199323236942291, 0.00010426656081108376, 0.00013405932986643165, 0.00013530968863051385, 0.00015669736603740603, 0.00026016199262812734, 0.00054699653992429376, 5.1659011660376564e-05, 0.00028596832999028265, 0.00019765237811952829, 0.00016865746874827892, 0.00046219135401770473, 0.00010817065049195662, 0.00014645814371760935, 0.00013484267401508987, 9.3622016720473766e-05, 0.00012611001147888601, 0.00014285324141383171, 0.00018154772988054901, 0.00010163228580495343, 0.00026580691337585449, 9.9707627668976784e-05, 0.00013774991384707391, 0.00045006547588855028, 0.010456082411110401, 7.8312921687029302e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,7,-20,102,-18,25,-62,-54,18,-6,99,-8,2,-8,-4,56,7,16,-34,2,75,1,32,-35,1,17,43,48,21,13,23,49,-8,27,10,-15,4,48,-59,-25,19,9,26,17,-83,-57,26,-5,-11,-17,-7,-7,48,6,-10,1,-2,-34,27,-33,29,-2,127,29,-13,-10,12,-53,67,35,2,-6,78,-34,72,2,17,-127,29,65,2,16,127,-13,38,30,-29,-20,35,-7,-14,82,1,19,-3,10, -48,13,-8,11,51,-8,-10,-127,40,13,-127,-5,-17,-12,4,94,19,-31,-12,-16,75,-97,127,25,-62,-32,-107,-16,27,34,-49,18,123,11,-12,-2,-26,127,-62,-127,8,-18,-30,13,47,-127,127,-44,-77,54,50,6,38,-63,32,55,37,43,-100,84,127,32,3,-21,43,-38,-88,-2,37,-30,-19,48,-48,-49,107,-5,-29,-59,-33,63,-66,63,-14,10,-10,49,55,-42,-28,54,-15,73,-127,-32,25,-127, 0,-3,-23,-73,7,20,38,21,-3,-1,4,62,0,-11,-11,6,-10,17,-16,16,6,24,24,-33,0,-32,9,11,-5,6,45,-80,47,15,8,-23,10,3,-31,-20,6,3,-16,7,24,-32,22,1,7,-6,8,-5,6,6,-4,8,-7,47,8,-3,11,-18,3,-18,-26,-17,31,-50,-108,-7,41,-17,-127,-25,-11,15,10,-11,6,12,-15,24,-35,-3,-41,21,25,37,-26,-17,24,-11,15,6,-3,-48, 
  /* [0][1][][] */ -41,59,-18,38,-84,-16,-10,-44,26,94,-44,-21,-31,-25,-7,63,127,-24,-91,-13,58,-127,-28,15,-35,-48,-127,-7,38,35,-50,28,-127,-75,-57,3,65,-4,-53,49,-19,85,1,-2,34,-54,-11,-32,127,43,-4,21,43,10,-37,-17,31,9,-123,127,-36,-86,20,127,-60,-34,-83,126,-36,127,-19,53,-37,-57,38,8,-35,-69,127,47,127,35,4,-1,127,28,-97,45,-39,-36,-101,41,93,102,28,-59, 127,127,127,127,-46,-127,127,24,127,-127,15,-127,-107,127,127,127,-15,-127,-60,-127,127,21,-66,127,127,127,-56,-127,127,127,-127,127,-8,-127,-125,127,-127,-46,97,111,-127,-127,127,127,127,-118,-103,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-40,40,-107,-26,-70,-70,127,127,-67,127,127,-106,-127,127,-42,127,-127,-127,-127,122,-73,127,-42,127,79,127,-39,-127,-26,-108,-127,-127,-23,-127,-24,-127,-127,117, -24,65,-38,3,127,72,-21,48,5,25,-13,-4,-27,-30,-13,-7,-101,-21,-127,38,30,76,-12,-117,-33,-42,124,70,10,35,71,8,127,-49,127,-4,54,4,-93,15,37,23,-23,2,-22,-53,-11,-43,81,15,-12,40,-6,-4,-74,-13,25,22,127,-91,1,127,0,-37,-111,-27,-72,100,15,-16,113,24,-19,-58,12,47,-28,-8,-43,-4,-46,10,46,23,-91,34,127,-47,31,-23,127,-9,-114,34,33,17, 
  /* [0][2][][] */ -5,-40,-22,-62,-3,16,42,30,-2,9,-20,52,24,-35,-7,9,44,2,11,21,-8,30,-17,-27,2,-25,8,2,-9,-6,48,-75,-39,66,-28,-25,31,-36,-64,17,10,9,-35,18,14,-80,-12,-2,-8,5,14,-7,8,1,-22,6,1,45,-48,34,-3,-10,5,16,-6,-8,21,-51,-56,11,-21,-14,-122,-33,1,19,15,-10,57,17,23,24,-42,14,13,25,-22,9,3,25,23,-5,17,40,-6,-32, -28,-11,-27,24,-44,74,-23,64,5,-6,50,-12,127,-8,-18,-17,0,-40,-59,23,-22,78,-44,-113,-47,-48,100,68,13,43,52,-2,-122,60,-15,-23,-28,-27,-127,-3,46,-14,-16,35,-24,-44,-18,-49,-60,27,68,26,-12,-80,30,51,18,27,73,-57,22,-56,-10,0,19,-25,-127,-56,-12,-27,-63,23,38,-47,-28,-5,-42,24,-55,-2,49,37,14,9,5,61,-95,127,14,127,-30,-18,110,-22,47,81, -10,-35,-26,29,14,65,-43,11,4,-6,0,14,12,-51,-10,-11,-41,-6,16,19,-24,7,-22,3,-4,19,-4,49,-2,-5,33,29,16,41,19,-23,-6,-27,-28,8,12,-12,21,8,-72,-32,-12,4,-1,-17,-1,-3,-9,8,-16,-4,0,-49,13,-31,-22,50,9,-28,-11,-1,35,-54,46,7,52,-22,33,-57,-18,23,11,13,-4,22,-30,34,88,-14,-18,54,37,-9,109,10,3,-18,7,-22,-7,-54, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0071325879544019699, 0.0060488455928862095, 0.010530836880207062, 0.0016554243629798293, 0.0068974755704402924, 0.0072992704808712006, 0.013280843384563923, 0.0031910135876387358, 0.0063549387268722057, 0.019668061286211014, 0.0065092458389699459, 0.012255970388650894, 0.0030658405739814043, 0.016439100727438927, 0.0070220581255853176, 0.0074596949853003025, 0.0044305059127509594, 0.011868649162352085, 0.0025311408098787069, 0.011931192129850388, 0.0020391335710883141, 0.007524274755269289, 0.0046629952266812325, 0.015054795891046524, 0.0070636523887515068, 0.0099993832409381866, 0.005554805975407362, 0.0080629773437976837, 0.0055628940463066101, 0.0037781787104904652, 0.0049426336772739887, 0.0070272176526486874, 0.0048600053414702415, 0.004672774113714695, 0.0085512064397335052, 0.0063418028876185417, 0.017537837848067284, 0.0047105946578085423, 0.0018512433161959052, 0.0056837787851691246, 0.0074426950886845589, 0.014580956660211086, 0.014893547631800175, 0.0067787454463541508, 0.0066444524563848972, 0.0024593290872871876, 0.0084046944975852966, 0.0068317144177854061, 0.0035144677385687828, 0.0075161620043218136, 0.0071347560733556747, 0.0089113637804985046, 0.0086741633713245392, 0.0095719620585441589, 0.011165566742420197, 0.015460435301065445, 0.012184171937406063, 0.0074239117093384266, 0.0052843252196907997, 0.0037600873038172722, 0.012387967668473721, 0.0066633513197302818, 0.011915435083210468, 0.0055220676586031914, 0.011253402568399906, 0.0077412603422999382, 0.0035915272310376167, 0.0026111467741429806, 0.014185938984155655, 0.012473620474338531, 0.0090097123757004738, 0.0044313287362456322, 0.0056975213810801506, 0.0057506617158651352, 0.0066596381366252899, 0.011056884191930294, 0.023247351869940758, 0.0021955079864710569, 0.012153653427958488, 0.0084002260118722916, 0.0071679423563182354, 0.019643131643533707, 0.0045972527004778385, 0.0062244711443781853, 0.0057308138348162174, 0.0039789355359971523, 0.0053596752695739269, 0.0060712625272572041, 0.0077157784253358841, 0.004319372121244669, 0.011296793818473816, 0.0042375740595161915, 0.0058543714694678783, 0.019127782434225082, 0.44438350200653076, 0.0033282991498708725, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 13003, 2525, 5515, -582, 4517, 6127, 15696, 7363, -1270, 19668, 6627, 1451, 7040, 40965, -473, -2328, 10683, 10500, 2270, -241, -675, 16851, 5965, 2975, 7224, 4825, 4962, 5078, 24, -29, 6107, 10129, 18498, 1445, 6686, -482, 19687, 5538, 877, 5772, 626, 13612, 15437, 4476, 2591, 12291, 15788, 3763, 5430, 4064, 306, -812, 14611, 6690, 7407, 14353, -177, 6713, 2745, 3866, 13384, 6172, 2098, 5488, 8036, 3846, 5431, -816, 15360, 8282, 8677, -1465, -1488, 2347, 1332, 3802, 21130, 13268, 14604, -1710, 4322, -4334, -2055, 590, 5940, 4477, 6200, 4206, 9420, 4044, 9254, 4027, 17763, 20293, -8527, 17049, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00019909850379917771, 0.00015873021038714796, 0.00024792648036964238, 0.00091517274267971516, 0.0003612510918173939, 0.00014988455222919583, 0.00020010357548017055, 0.00047911322326399386, 0.00036738769267685711, 9.4427785370498896e-05, 0.00021518071298487484, 0.00056250352645292878, 0.000391946523450315, 0.00011810918658738956, 0.00022702895512338728, 0.00030609901295974851, 0.00020417729683686048, 0.00022139916836749762, 0.00020666157070081681, 0.00052232173038646579, 0.00039970464422367513, 0.00014753630966879427, 0.00025518229813314974, 0.0002664628264028579, 0.00024655935703776777, 0.00043238021316938102, 0.0002897047670558095, 0.00018772562907543033, 0.00053340854356065392, 0.00034778422559611499, 0.0002400353696430102, 0.00018814897339325398, 0.00010779359581647441, 0.00073823949787765741, 0.00024843218852765858, 0.00051516527310013771, 0.00011459545203251764, 0.00046474623377434909, 0.00049610913265496492, 0.00016026773664634675, 0.0007281256839632988, 0.00013980382937006652, 0.00013932066212873906, 0.00016560165386181325, 0.0004301438748370856, 0.00026586066815070808, 0.0001800508180167526, 0.0003847487096209079, 0.00029028538847342134, 0.00020793231669813395, 0.0004245501768309623, 0.00080370809882879257, 0.00018318396178074181, 0.00024004020087886602, 0.0003154420992359519, 0.00012763756967615336, 0.00038614630466327071, 0.00025262296549044549, 0.00028069806285202503, 0.00041275951662100852, 0.00012553994019981474, 0.00022425089264288545, 0.0005008482257835567, 0.00050215248484164476, 0.00013316824333742261, 0.00029626989271491766, 0.00035588658647611737, 0.00042622600449249148, 0.00017480865062680095, 0.00014025694690644741, 0.00022942588839214295, 0.00032743587507866323, 0.00026986101875081658, 0.0005614446708932519, 0.0003185233217664063, 0.00032468829886056483, 0.00011253287084400654, 0.00033562621683813632, 0.00011471860489109531, 0.00072400085628032684, 0.00024807159206829965, 0.00047035090392455459, 0.00017300473700743169, 0.00044218296534381807, 0.00027274605236016214, 0.00034347106702625751, 0.000255841005127877, 0.00032840136555023491, 0.00017348024994134903, 0.00039705881499685347, 0.00015087664360180497, 0.00041864649392664433, 0.00011973839718848467, 0.00013698422117158771, 0.00033996917773038149, 0.00019233906641602516, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 17,-11,127,92,60,-2,50,-33,88,-24,-24,-64,29,68,-33,-70, 
  /* [1][0][][] */ 22,72,38,40,115,12,16,49,50,54,-45,127,-30,-11,97,-112, 
  /* [2][0][][] */ 1,-25,5,7,-42,34,-20,54,-61,-51,18,54,-12,-127,60,-83, 
  /* [3][0][][] */ 127,104,-15,21,-109,-33,-63,-16,-2,2,100,-70,-50,84,-33,-35, 
  /* [4][0][][] */ -3,-3,27,15,-34,41,-23,74,-94,-70,-9,-7,2,-127,26,13, 
  /* [5][0][][] */ 84,-65,-46,-9,-32,-103,-32,36,1,4,-127,1,29,18,-11,49, 
  /* [6][0][][] */ -112,-64,-45,88,-73,-24,-6,43,-127,2,-96,-64,12,44,-19,82, 
  /* [7][0][][] */ -4,19,-82,75,44,-127,-18,60,3,-43,4,0,3,27,-67,23, 
  /* [8][0][][] */ 25,-42,-5,-9,15,32,-53,-64,-13,14,-63,14,-127,-4,0,18, 
  /* [9][0][][] */ 28,-38,57,96,15,41,16,-61,127,-113,5,-34,19,78,-64,50, 
  /* [10][0][][] */ -105,-53,22,-68,127,62,54,64,117,-68,-61,41,103,-82,-87,115, 
  /* [11][0][][] */ 33,-6,-127,15,43,29,-20,32,-22,-26,-8,-13,-2,10,-48,-3, 
  /* [12][0][][] */ 96,-26,-1,-22,2,-58,-50,-41,23,-6,-127,-27,-43,-22,-8,77, 
  /* [13][0][][] */ 76,-93,46,-51,113,-3,-117,-127,42,-100,8,54,10,-5,8,-10, 
  /* [14][0][][] */ -60,24,-85,-54,91,-126,57,-64,36,19,-6,-90,17,127,-33,30, 
  /* [15][0][][] */ 17,2,62,37,49,-37,-40,-25,18,-60,-59,-12,-127,-57,-11,46, 
  /* [16][0][][] */ -103,57,42,15,5,95,65,96,19,21,127,1,38,16,31,-50, 
  /* [17][0][][] */ -11,-3,-47,-44,-45,14,35,79,-10,127,-26,-1,6,88,78,9, 
  /* [18][0][][] */ -4,127,-38,-4,10,5,44,-58,8,100,-36,80,5,-38,21,-91, 
  /* [19][0][][] */ 8,-20,35,22,4,49,-2,16,14,17,-45,-8,-127,-11,-8,24, 
  /* [20][0][][] */ 101,-48,-19,-77,-19,27,29,-92,-44,28,-127,-30,28,-11,57,10, 
  /* [21][0][][] */ 46,-13,127,53,-13,52,34,15,-5,32,-25,9,-13,98,0,-1, 
  /* [22][0][][] */ 39,3,40,2,-6,12,23,127,23,-13,22,41,11,51,20,37, 
  /* [23][0][][] */ -27,20,-75,12,11,-127,16,40,4,-16,1,-12,-57,5,-1,37, 
  /* [24][0][][] */ 31,-48,13,-65,58,13,-10,-25,24,14,77,84,-37,74,127,44, 
  /* [25][0][][] */ -127,-107,-48,3,0,-4,28,-32,-78,12,-96,16,7,27,29,54, 
  /* [26][0][][] */ 4,-13,93,0,17,19,-54,68,-75,-101,2,40,14,-127,52,-5, 
  /* [27][0][][] */ -105,56,-42,27,27,-24,23,27,29,-25,127,10,-17,18,-17,-21, 
  /* [28][0][][] */ -19,-10,20,36,0,5,9,82,25,17,-20,-4,-127,-11,-9,33, 
  /* [29][0][][] */ -3,53,31,-33,33,-24,9,-19,-127,23,-38,2,-1,42,-81,13, 
  /* [30][0][][] */ -4,1,-127,-24,23,-48,7,17,-13,-3,1,-18,-42,-31,11,6, 
  /* [31][0][][] */ 127,-36,-110,6,28,10,-17,93,-21,2,-58,-43,6,8,-54,32, 
  /* [32][0][][] */ -125,51,33,48,27,96,22,32,36,-3,127,16,-33,14,-26,-27, 
  /* [33][0][][] */ -7,5,127,-33,-52,25,-1,-57,-2,9,-11,22,-13,14,25,21, 
  /* [34][0][][] */ -16,-16,-35,-101,10,21,26,-40,-19,-27,-24,-127,-8,-10,35,18, 
  /* [35][0][][] */ 5,-33,43,38,57,-17,22,-20,-122,30,-5,21,-24,127,-45,-38, 
  /* [36][0][][] */ -95,52,-30,-5,-9,44,55,66,8,28,127,-16,19,-1,15,-25, 
  /* [37][0][][] */ -41,10,127,-24,-87,-59,37,-24,5,31,-7,17,-5,-60,66,18, 
  /* [38][0][][] */ 15,-18,-25,17,44,-64,-78,-2,-16,-22,70,-19,127,26,-19,12, 
  /* [39][0][][] */ -22,-38,-14,-49,-50,-86,58,127,-53,-28,-1,-39,1,58,66,68, 
  /* [40][0][][] */ 53,-9,-15,-18,-6,79,-25,1,16,-12,20,5,127,18,-14,-18, 
  /* [41][0][][] */ 6,-1,-51,-127,26,-16,-17,-79,-15,-46,2,-41,-1,-41,-21,22, 
  /* [42][0][][] */ 53,23,12,105,-107,-24,-105,12,-67,-66,65,-90,-52,127,-23,4, 
  /* [43][0][][] */ 31,100,-30,127,22,19,28,-72,-31,82,-12,33,3,-43,49,39, 
  /* [44][0][][] */ -15,-24,-127,16,50,78,-42,58,-4,-21,33,-16,22,-24,-47,8, 
  /* [45][0][][] */ 6,5,-21,-127,-12,-22,41,-15,-9,27,-25,19,-4,-105,39,-41, 
  /* [46][0][][] */ 23,40,63,-29,27,14,-31,49,3,-48,-25,26,2,127,46,-5, 
  /* [47][0][][] */ 26,-13,13,-47,-32,11,-75,58,-9,-32,14,39,15,-127,41,19, 
  /* [48][0][][] */ 4,-14,16,-127,1,-2,-9,8,15,-26,17,-6,-1,44,-7,73, 
  /* [49][0][][] */ 27,-52,-12,114,73,-6,-11,61,-44,7,36,25,12,53,127,6, 
  /* [50][0][][] */ -38,-11,62,-1,14,127,-9,-60,46,-6,124,36,78,-19,3,-86, 
  /* [51][0][][] */ 33,46,6,12,31,1,-38,28,42,4,3,127,7,38,30,-48, 
  /* [52][0][][] */ -11,57,124,9,33,-47,-16,-56,-21,6,1,55,-14,82,-127,-21, 
  /* [53][0][][] */ 10,-35,-42,-127,-53,-11,-4,-26,0,23,-10,-15,40,-6,61,5, 
  /* [54][0][][] */ 11,4,-45,-46,5,12,-18,16,67,-8,0,-19,-9,127,28,25, 
  /* [55][0][][] */ -5,-17,-48,-36,-2,-48,9,-127,-7,-91,7,-18,-34,-73,-60,13, 
  /* [56][0][][] */ 41,51,42,59,17,-13,21,127,27,-29,2,-33,86,-7,-59,38, 
  /* [57][0][][] */ 66,-8,127,-23,-59,-44,-28,-41,10,-5,-98,24,47,-27,22,14, 
  /* [58][0][][] */ 86,98,-1,95,-127,-24,7,36,-14,31,98,-28,-94,-66,-26,-54, 
  /* [59][0][][] */ 127,-19,0,3,-16,-23,-7,9,-40,35,-115,-5,9,-19,10,14, 
  /* [60][0][][] */ -127,25,8,13,20,32,28,23,9,10,71,-9,-33,-8,15,-24, 
  /* [61][0][][] */ -77,34,50,49,59,21,-61,-56,127,-90,42,-7,26,-27,-73,-59, 
  /* [62][0][][] */ -41,-33,-127,56,70,59,13,71,32,-54,49,-23,-70,-8,-89,6, 
  /* [63][0][][] */ -41,16,127,-54,-57,-47,45,-12,17,2,11,13,4,-33,66,30, 
  /* [64][0][][] */ 9,75,-5,23,73,-1,96,-127,-5,98,13,-27,-17,-108,1,49, 
  /* [65][0][][] */ -3,5,13,-13,70,15,-1,-127,-23,-58,-35,-48,-15,-43,43,15, 
  /* [66][0][][] */ -127,10,-13,15,-30,30,21,-49,-70,-27,-77,56,49,11,39,72, 
  /* [67][0][][] */ -3,-50,-1,127,12,-7,-27,36,53,23,9,3,-12,-37,-95,-21, 
  /* [68][0][][] */ 19,-10,8,127,-38,-14,11,-3,-48,15,6,-6,-23,-44,-11,-37, 
  /* [69][0][][] */ 91,120,15,85,55,-18,63,-127,-7,76,27,48,11,-40,16,5, 
  /* [70][0][][] */ 10,-30,5,-95,127,-53,45,11,94,-16,65,-53,29,85,84,92, 
  /* [71][0][][] */ 16,40,6,80,43,-127,-45,82,42,-90,12,10,14,-53,-56,35, 
  /* [72][0][][] */ -127,-65,-24,42,28,26,-44,1,-37,-33,-76,29,50,10,-2,91, 
  /* [73][0][][] */ -13,-17,-17,57,15,-23,-8,-25,66,-5,-19,5,23,127,-61,-36, 
  /* [74][0][][] */ 79,-27,23,-15,-45,-13,35,-11,-35,-2,-127,32,-110,-3,15,44, 
  /* [75][0][][] */ -45,7,-34,127,-32,32,-10,-60,-77,21,4,-51,12,-96,-18,-35, 
  /* [76][0][][] */ -11,-23,3,43,29,15,-35,-122,8,-127,11,28,-18,-26,47,-48, 
  /* [77][0][][] */ 127,-5,30,40,-28,9,-52,-18,29,-11,-26,61,40,-6,-54,42, 
  /* [78][0][][] */ -18,-10,58,1,6,-5,-61,38,46,-25,-40,-36,22,127,35,-24, 
  /* [79][0][][] */ 4,21,36,12,23,42,-37,-39,7,-39,65,-25,127,-18,-30,-39, 
  /* [80][0][][] */ -127,-86,-87,93,13,43,17,-16,-108,14,-101,27,60,-43,-40,93, 
  /* [81][0][][] */ 65,32,-71,37,125,75,-31,-31,-8,-97,-31,-99,-31,12,-127,25, 
  /* [82][0][][] */ 92,127,-1,27,-117,-15,-51,-30,-86,2,122,-58,-64,98,-39,-37, 
  /* [83][0][][] */ 127,41,17,-20,7,-13,-11,31,27,15,76,-39,-56,-24,-34,-83, 
  /* [84][0][][] */ 17,-59,-66,-37,30,7,4,-127,-19,-52,20,3,7,2,-2,11, 
  /* [85][0][][] */ -12,-20,-48,-60,-15,-14,66,95,-3,127,-25,-52,38,89,70,-20, 
  /* [86][0][][] */ 73,-17,12,11,-1,-19,-13,-19,-10,3,-127,12,-3,2,-15,7, 
  /* [87][0][][] */ -13,46,21,-46,2,65,-45,41,-27,-27,44,14,-9,-127,2,-15, 
  /* [88][0][][] */ -7,-12,-96,-36,43,6,-4,-127,-18,-46,-13,-43,-50,-1,14,-17, 
  /* [89][0][][] */ 9,-3,17,-127,28,17,-32,94,68,-80,39,11,-8,38,19,58, 
  /* [90][0][][] */ -24,29,-23,48,89,13,127,-103,70,118,-21,46,16,15,-19,-20, 
  /* [91][0][][] */ 51,-26,-42,1,-7,-127,-3,8,-5,-2,-43,3,18,-6,5,16, 
  /* [92][0][][] */ 24,14,127,73,28,45,28,76,-78,53,-58,49,13,88,-9,4, 
  /* [93][0][][] */ 127,-29,-48,-20,-14,-57,12,40,-21,33,-105,-16,-2,10,-3,53, 
  /* [94][0][][] */ 31,-1,27,59,96,-39,-7,65,-1,-15,-18,41,-3,127,-33,-55, 
  /* [95][0][][] */ -111,54,28,54,16,54,34,7,2,21,127,-23,-39,32,-13,-52, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00065045140217989683, 0.00051856884965673089, 0.00080997153418138623, 0.0029898534994572401, 0.0011802010703831911, 0.00048967025941237807, 0.00065373495453968644, 0.0015652546426281333, 0.001200249302200973, 0.00030849393806420267, 0.00070299167418852448, 0.0018376893131062388, 0.0012804825091734529, 0.00038586067967116833, 0.0007416997104883194, 0.0010000201873481274, 0.00066704372875392437, 0.00072330725379288197, 0.00067515979753807187, 0.0017064160201698542, 0.0013058282202109694, 0.0004819986061193049, 0.00083367613842710853, 0.00087052950402721763, 0.00080550514394417405, 0.0014125787420198321, 0.00094646052457392216, 0.00061329640448093414, 0.0017426364356651902, 0.0011362050427123904, 0.00078419141937047243, 0.00061467947671189904, 0.00035215981188230217, 0.0024118158034980297, 0.00081162364222109318, 0.0016830360982567072, 0.00037438137223944068, 0.0015183179639279842, 0.0016207799781113863, 0.00052359193796291947, 0.0023787741083651781, 0.00045673671411350369, 0.00045515820966102183, 0.00054101774003356695, 0.0014052726328372955, 0.00086856225971132517, 0.00058822293067350984, 0.0012569674290716648, 0.00094835733762010932, 0.00067931128432974219, 0.0013869981048628688, 0.0026257005520164967, 0.00059845886426046491, 0.00078420719364657998, 0.0010305439354851842, 0.0004169897292740643, 0.001261533354409039, 0.00082531484076753259, 0.00091703573707491159, 0.0013484782539308071, 0.00041013682493939996, 0.00073262379737570882, 0.0016362625174224377, 0.0016405235510319471, 0.00043505834764800966, 0.00096790859242901206, 0.0011626753257587552, 0.0013924730010330677, 0.0005710968398489058, 0.000458217051345855, 0.00074953044531866908, 0.0010697273537516594, 0.00088163133477792144, 0.0018342301482334733, 0.0010406102519482374, 0.0010607510339468718, 0.00036764296237379313, 0.0010964850662276149, 0.00037478370359167457, 0.0023652983363717794, 0.00081044563557952642, 0.0015366283478215337, 0.00056520348880439997, 0.0014446041313931346, 0.00089105661027133465, 0.0011221140157431364, 0.00083582813385874033, 0.0010728816268965602, 0.0005667569930665195, 0.0012971842661499977, 0.00049291137838736176, 0.0013677108800038695, 0.00039118327549658716, 0.00044752508983947337, 0.0011106734164059162, 0.00062836840515956283, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -32956, 3792, 1507, -8723, -1056, -4229, -12735, -44380, 5078, 29199, 35725, -9929, -353, -23443, 35428, -39912, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00064572627888992429, 0.00064119213493540883, 0.0010219367686659098, 0.00096281582955271006, 0.00076386902946978807, 0.00095273583428934216, 0.0012448366032913327, 0.00053751509403809905, 0.00069952284684404731, 0.0005734502337872982, 0.00077426712960004807, 0.00049914163537323475, 0.0012096702121198177, 0.0010567454155534506, 0.00064706715056672692, 0.00054814026225358248, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -17,1,-22,5,18,1,-5,95,-56,19,44,-8,15,-15,-8,11,25,-16,-14,-9,63,-11,17,122,-22,83,-1,-18,22,-18,19,-30,-12,47,18,-51,21,49,17,-10,-108,-21,18,35,40,26,-127,-45, 
  /* [1][0][][] */ -36,-16,25,17,-30,7,1,57,-53,-36,1,-40,-19,-24,4,0,-28,118,-6,22,12,12,-23,-13,33,-44,22,21,-26,-90,-36,23,-25,0,33,-1,-2,-45,-4,22,-15,-33,127,15,10,0,18,-14, 
  /* [2][0][][] */ -21,-4,-9,-37,-3,-62,5,-20,0,10,17,22,16,12,-15,10,-1,-19,-23,-12,-5,-1,-1,-127,-12,72,-12,5,-1,-20,1,-8,-4,49,12,-5,22,11,27,1,-42,7,-16,-6,-5,-12,17,6, 
  /* [3][0][][] */ -10,32,0,-31,-1,1,4,-2,-21,-1,-1,38,-127,6,-9,-1,0,4,-21,2,-33,6,8,15,-9,-10,4,26,-9,17,4,14,4,0,16,18,-11,25,44,4,9,8,22,-30,8,-8,4,18, 
  /* [4][0][][] */ 32,-29,12,7,18,31,25,-24,-30,3,-9,-20,-2,10,1,12,21,-9,-80,5,-1,16,12,70,1,-28,9,50,10,-76,17,3,15,-38,33,-127,14,33,3,19,-23,24,10,-25,-14,-27,12,0, 
  /* [5][0][][] */ 31,6,-21,54,-3,-3,5,21,0,-6,42,8,4,45,4,-1,-18,20,28,0,15,6,3,-28,4,-54,3,-23,-6,-9,5,3,67,-127,3,28,-12,-10,10,7,-91,55,17,-1,-4,3,-92,-8, 
  /* [6][0][][] */ 22,-2,7,6,-14,-2,5,-10,0,9,-1,6,-18,9,0,0,-1,-11,127,7,6,8,15,-37,3,5,23,-11,-11,-4,2,6,-2,-12,29,-35,-1,-44,74,15,-3,-5,-8,4,-6,3,7,-11, 
  /* [7][0][][] */ -43,-17,-11,37,-7,75,-7,51,-2,33,-11,127,78,4,-9,-2,-12,-20,-7,-14,-32,-11,-16,70,-9,-30,-54,-25,-9,-11,-11,-8,-2,1,-26,5,4,-54,97,-6,25,27,-61,-65,16,-14,-2,5, 
  /* [8][0][][] */ -46,-40,-3,-2,-9,4,-4,27,-8,-66,5,37,49,0,16,5,-10,57,-36,-2,-46,27,-10,-15,0,-5,7,44,-6,116,-11,16,0,2,-19,-127,-106,68,31,36,16,-4,106,-19,10,25,23,31, 
  /* [9][0][][] */ -21,5,-5,32,18,-41,-2,-5,60,-45,3,56,-55,8,15,-2,-3,23,-34,-19,49,4,-10,-13,10,14,53,-32,11,11,16,3,-11,24,79,-109,-16,-127,-103,10,-25,20,63,13,11,16,-22,-39, 
  /* [10][0][][] */ -18,-11,-35,-127,49,84,4,-14,1,35,19,14,54,-54,-29,31,37,-43,60,-33,37,-19,46,57,-39,-112,2,-32,54,32,46,-40,-37,-79,22,-6,15,-47,3,-32,-32,-68,-20,13,11,17,17,-38, 
  /* [11][0][][] */ 3,59,-12,62,29,-68,-82,-16,-11,62,-22,1,-9,49,-3,-78,24,41,-8,-17,-62,-104,14,6,8,-45,22,-19,48,-39,24,-96,57,-19,-39,-95,101,22,8,-127,2,67,98,-71,0,-51,29,34, 
  /* [12][0][][] */ 127,-8,-13,12,0,18,2,98,18,-7,-57,-31,3,15,-8,-3,-6,11,-4,-8,4,-4,3,17,0,14,-1,11,-8,11,2,5,2,-63,-13,9,-19,-15,-30,2,-15,-80,2,-120,-54,-8,81,-3, 
  /* [13][0][][] */ 9,3,1,7,7,-11,3,2,-1,10,4,24,-5,6,7,-2,5,1,11,4,12,-11,8,-2,-1,4,15,127,13,-5,6,-5,1,1,-40,24,10,-4,7,-13,-12,-3,-2,2,-1,-6,-10,-13, 
  /* [14][0][][] */ 59,-14,36,-69,48,29,34,-86,-53,-50,-4,127,-72,3,60,17,49,24,-58,55,7,10,68,-16,22,64,-34,-109,31,-25,59,48,-4,68,-126,-52,-42,47,90,6,-35,7,50,-3,6,4,13,-27, 
  /* [15][0][][] */ 1,-49,-69,-46,56,25,84,-60,-11,18,-6,-49,79,33,-105,56,52,52,72,-86,-106,-27,48,-18,-108,51,27,54,66,58,46,-53,27,53,105,120,-25,-101,-12,-47,86,66,127,-49,-3,-38,-19,75, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.027443366125226021, 0.027250664308667183, 0.043432310223579407, 0.040919672697782516, 0.032464433461427689, 0.040491271764039993, 0.052905555814504623, 0.022844390943646431, 0.029729720205068588, 0.024371635168790817, 0.03290635347366333, 0.02121352031826973, 0.051410984247922897, 0.04491167888045311, 0.027500353753566742, 0.023295961320400238, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 5947, 30661, -1325, 62861, 4411, 132508, -1332, 47039, 6940, 33814, 26196, -934, -1215, 28497, -1750, -69, -788, 2585, 1818, -2603, 501, -3669, -713, -20974, -5324, 45856, 130386, 94828, 3126, 352, -1552, 803, 25705, 871, 43593, -2063, 35141, -648, 54835, 2723, 537, 64553, 1805, 5262, 41561, -164, 7112, 51291, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.5915875893551856e-05, 3.6591449315892532e-05, 0.0001479854981880635, 3.9637820009374991e-05, 0.00017178415146190673, 5.7665685744723305e-05, 0.0002338298800168559, 0.00012572458945214748, 6.1959326558280736e-05, 3.7276317016221583e-05, 4.5614880946232006e-05, 0.00010787857172545046, 4.6836848923703656e-05, 3.4120952477678657e-05, 0.00015652089496143162, 0.00032041594386100769, 0.00021065367036499083, 6.6015621996484697e-05, 0.00011041909601772204, 0.00010590042074909434, 9.91801280179061e-05, 0.00015774187340866774, 9.0954112238250673e-05, 0.00013914743612986058, 9.9276774562895298e-05, 9.5505463832523674e-05, 2.9457440177793615e-05, 7.7364180469885468e-05, 0.0001426996459485963, 0.00013829823001287878, 0.00011840983643196523, 0.00014946081500966102, 4.7304169129347429e-05, 0.00011279192403890193, 2.7950489311479032e-05, 5.7540888519724831e-05, 0.00016583081742282957, 0.00010392623516963795, 0.0001047118566930294, 7.8082157415337861e-05, 0.00011569854541448876, 8.9204164396505803e-05, 7.4236442742403597e-05, 7.3530507506802678e-05, 2.6722567781689577e-05, 0.00014377200568560511, 7.3549177614040673e-05, 2.8284483050811104e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 71,-92,96,71,54,-35,106,-64,62,-87,-79,48,52,-42,-70,-90,102,78,49,77,65,-73,-83,50,-32,-42,-63,-62,-66,61,-62,-116,-12,42,69,64,-66,53,-49,-23,50,-74,58,61,-94,10,77,-33, 83,-95,127,85,-76,-69,-56,-84,97,-102,-63,75,79,-110,-93,90,-37,96,84,127,85,-114,54,71,-49,-80,-68,-78,57,79,-31,-127,-86,81,81,84,-83,81,-82,-15,76,-93,82,88,-75,-127,94,-104, 33,-46,70,38,20,-40,-47,-39,45,-31,4,34,30,-81,-54,-1,-53,37,34,69,35,-54,32,27,-27,-47,-45,-21,32,30,87,-90,-86,46,36,34,-31,39,-37,-10,41,-40,34,44,-7,-8,36,-73, 
  /* [0][1][][] */ 92,-111,-42,94,56,-83,127,-89,88,-115,-71,83,84,-112,-13,-127,127,106,74,-35,85,108,-127,73,74,-77,-94,-98,-127,86,-68,-10,-89,70,106,96,-85,77,-80,89,83,-101,87,91,-89,106,94,-91, 127,-127,-65,127,-127,-127,-89,-127,127,-127,-127,127,127,-127,-21,96,-66,127,127,-49,127,127,69,127,127,-127,-127,-127,54,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 62,-79,-33,67,38,-61,-48,-63,56,-44,-60,58,49,-54,-16,10,-63,50,58,-28,57,63,51,65,67,-65,-62,-45,36,54,127,15,-62,69,48,48,-48,60,-59,56,61,-57,54,62,-61,-66,58,-56, 
  /* [0][2][][] */ 46,-49,-46,51,26,-54,64,-43,40,-73,-4,40,56,-73,82,-80,75,50,34,-29,30,-11,-78,31,-22,-45,-49,-50,-75,32,-41,89,-76,38,47,41,-26,36,-42,-86,47,-49,41,46,-20,16,39,-76, 71,-72,-49,83,-57,-64,-72,-67,52,-78,-67,61,74,-47,127,30,-46,60,61,-42,57,-18,41,66,-47,-67,-78,-63,32,62,-25,117,-56,66,56,57,-49,59,-67,-104,70,-66,61,63,-87,50,62,-53, 40,-40,-26,49,28,-19,-18,-34,15,-28,-52,28,32,6,66,23,-35,22,29,-32,30,0,39,42,-23,-28,-49,-25,34,33,60,68,0,34,15,22,-22,29,-29,-54,29,-33,26,30,-65,9,30,-2, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028014248237013817, 0.0015551366377621889, 0.0062893833965063095, 0.0016846073558554053, 0.0073008262552320957, 0.0024507916532456875, 0.0099377697333693504, 0.0053432951681315899, 0.0026332712732255459, 0.0015842433786019683, 0.0019386323401704431, 0.0045848391018807888, 0.0019905660301446915, 0.0014501404948532581, 0.0066521377302706242, 0.013617677614092827, 0.0089527806267142296, 0.002805663738399744, 0.004692811518907547, 0.0045007676817476749, 0.0042151552625000477, 0.0067040296271443367, 0.003865549573674798, 0.0059137656353414059, 0.0042192628607153893, 0.0040589822456240654, 0.0012519411975517869, 0.0032879775390028954, 0.0060647348873317242, 0.0058776745572686195, 0.0050324178300797939, 0.0063520846888422966, 0.0020104271825402975, 0.0047936565242707729, 0.001187895773909986, 0.0024454877711832523, 0.0070478096604347229, 0.0044168648310005665, 0.004450253676623106, 0.0033184916246682405, 0.0049171880818903446, 0.0037911769468337297, 0.0031550487037748098, 0.0031250463798642159, 0.0011357091134414077, 0.0061103100888431072, 0.0031258400995284319, 0.0012020905269309878, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 534, 751, 2137, 375, 7351, 19574, 2732, 49, -746, -709, 1180, 949, 3069, 1067, 22621, 3067, 1952, -1442, -190, 3111, -1906, 8996, 11271, 8829, 4890, 202, 3457, 3473, 9605, -531, 6479, 5423, 579, -65, 5382, 3487, -1761, 430, -700, 5146, 1049, -721, -947, -38, 1085, 3249, 802, 938, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00040154720772989094, 0.00093571835896000266, 0.00026545123546384275, 0.00038008842966519296, 0.00029545518918894231, 0.00020665205374825746, 0.00041550357127562165, 0.00029022892704233527, 0.00041736621642485261, 0.00064635364105924964, 0.00087682780576869845, 0.0003098907764069736, 0.00040620440267957747, 0.00068687257589772344, 0.00015920534497126937, 0.00040915931458584964, 0.00025811136583797634, 0.00028687727171927691, 0.00027924866299144924, 0.00028767489129677415, 0.00032071478199213743, 0.00028500938788056374, 0.00033042981522157788, 0.00017572160868439823, 0.00032125279540196061, 0.00031958654290065169, 0.0020183154847472906, 0.00053351919632405043, 0.00018552318215370178, 0.00042467194725759327, 0.0004048525879625231, 0.00022527528926730156, 0.00069894862826913595, 0.00027512176893651485, 0.00068443088093772531, 0.0005257751327008009, 0.00078287301585078239, 0.00034905044594779611, 0.00024633959401398897, 0.00035612483043223619, 0.00019319432612974197, 0.00019824104674626142, 0.00032283016480505466, 0.00028395405388437212, 0.0017491376493126154, 0.00042484272853471339, 0.00028599274810403585, 0.0011982873547822237, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,1,-1,69,-34,38,23,-29, 
  /* [1][0][][] */ 23,64,38,17,23,-38,82,127, 
  /* [2][0][][] */ -39,0,2,4,-127,-14,8,-5, 
  /* [3][0][][] */ 95,-9,-25,-116,-127,22,39,-21, 
  /* [4][0][][] */ -127,36,-24,-18,75,-14,42,30, 
  /* [5][0][][] */ -115,-39,25,-13,-127,16,6,93, 
  /* [6][0][][] */ -16,-127,24,-22,3,6,-7,27, 
  /* [7][0][][] */ -72,-8,6,102,127,-29,-41,0, 
  /* [8][0][][] */ 67,1,-7,-127,-2,-13,-45,-26, 
  /* [9][0][][] */ -15,-127,-3,-1,10,83,-62,81, 
  /* [10][0][][] */ -98,1,-16,9,-127,72,71,-3, 
  /* [11][0][][] */ 103,12,45,11,-57,-39,-36,-127, 
  /* [12][0][][] */ -5,11,39,0,9,-68,127,64, 
  /* [13][0][][] */ 62,-27,-13,-12,117,121,127,-37, 
  /* [14][0][][] */ 127,49,-17,28,-117,-9,-25,-19, 
  /* [15][0][][] */ -13,-127,20,-8,2,0,10,42, 
  /* [16][0][][] */ -53,-7,9,-9,-127,-8,12,3, 
  /* [17][0][][] */ -32,95,-122,-1,6,-127,119,-88, 
  /* [18][0][][] */ 127,-22,-44,14,-59,22,12,96, 
  /* [19][0][][] */ 127,-40,-14,2,64,-6,41,0, 
  /* [20][0][][] */ 126,21,-10,127,-1,37,-2,-62, 
  /* [21][0][][] */ 5,24,-54,-7,-22,71,-127,-68, 
  /* [22][0][][] */ -127,16,35,-16,-32,14,-60,-37, 
  /* [23][0][][] */ -42,-51,2,23,-127,57,73,-19, 
  /* [24][0][][] */ 127,0,7,-14,-125,-34,-6,3, 
  /* [25][0][][] */ 23,-12,-4,-17,127,53,54,-28, 
  /* [26][0][][] */ 5,-86,6,-39,-4,-127,80,-55, 
  /* [27][0][][] */ -19,-127,27,-14,-2,-53,31,-7, 
  /* [28][0][][] */ -127,42,-20,8,-15,-6,124,114, 
  /* [29][0][][] */ -19,52,8,2,4,44,-116,-127, 
  /* [30][0][][] */ 127,-23,-7,11,-43,1,-32,-12, 
  /* [31][0][][] */ -15,-34,46,-17,12,-110,127,67, 
  /* [32][0][][] */ -73,18,4,5,-127,-86,-103,58, 
  /* [33][0][][] */ -26,16,-2,18,-127,-53,-45,18, 
  /* [34][0][][] */ 16,-127,43,3,-3,82,-66,70, 
  /* [35][0][][] */ -22,-47,-127,-12,-5,-69,46,-51, 
  /* [36][0][][] */ 7,127,59,6,-6,5,-18,-29, 
  /* [37][0][][] */ -127,39,34,-13,63,-30,-12,-119, 
  /* [38][0][][] */ -127,-20,-48,-11,45,25,28,106, 
  /* [39][0][][] */ 14,-66,73,-11,-1,-88,127,118, 
  /* [40][0][][] */ -28,-10,-17,-43,-127,102,103,-33, 
  /* [41][0][][] */ -127,65,4,-83,-108,-109,-95,58, 
  /* [42][0][][] */ -44,-127,-91,0,-3,69,-119,-78, 
  /* [43][0][][] */ -82,-3,-19,-127,113,74,68,3, 
  /* [44][0][][] */ 127,-20,31,-119,45,-38,-22,56, 
  /* [45][0][][] */ -9,-127,-20,-11,-3,-74,81,19, 
  /* [46][0][][] */ 117,0,-9,-31,127,-31,-29,8, 
  /* [47][0][][] */ 127,-14,0,99,-6,24,5,-46, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00071725487941876054, 0.0016714063240215182, 0.00047415640437975526, 0.00067892461083829403, 0.0005277503514662385, 0.0003691276942845434, 0.00074218411464244127, 0.0005184150068089366, 0.00074551120633259416, 0.0011545349843800068, 0.0015662143705412745, 0.00055353558855131269, 0.00072557368548586965, 0.0012269109720364213, 0.00028437704895623028, 0.00073085183976218104, 0.00046104576904326677, 0.00051242823246866465, 0.00049880176084116101, 0.00051385292317718267, 0.00057286972878500819, 0.00050909176934510469, 0.00059022300411015749, 0.00031387884519062936, 0.00057383073726668954, 0.00057085440494120121, 0.0036051715724170208, 0.00095298694213852286, 0.00033138669095933437, 0.00075856089824810624, 0.00072315899888053536, 0.00040239302325062454, 0.0012484815670177341, 0.00049143022624775767, 0.001222549588419497, 0.00093915424076840281, 0.0013983896933495998, 0.00062348367646336555, 0.00044001865899190307, 0.00063612015219405293, 0.00034508912358433008, 0.00035410371492616832, 0.00057664827909320593, 0.00050720665603876114, 0.0031243585981428623, 0.00075886596459895372, 0.00051084824372082949, 0.00214041443541646, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -41133, 25669, -15879, -15373, 16604, -5122, 29519, 40594, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00048918259562924504, 0.00071329833008348942, 0.0013781118905171752, 0.001618463546037674, 0.00087236159015446901, 0.0005036710062995553, 0.00068662752164527774, 0.00091925438027828932, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -54,-6,-32,18,12,-23,5,-3,-106,127,-29,114,115,15,70,-26,3,-24,-1,-3,-11,-2,-17,-37,28,-94,7,59,-13,12,22,-37,0,-72,111,22,1,-3,-11,-20,110,-11,43,-24,-30,22,-8,-11, 
  /* [1][0][][] */ -3,35,127,7,-3,-27,-1,-77,32,-4,22,7,-22,6,-9,-114,14,-57,12,5,-29,37,23,-36,-19,-9,13,1,17,-5,18,-4,-4,10,15,10,-16,-28,62,-56,14,41,-11,26,-20,6,25,-6, 
  /* [2][0][][] */ 8,-50,16,-44,33,34,-10,-32,2,3,-6,22,-11,58,5,2,-44,127,-28,-30,-16,27,-39,-5,125,4,0,-8,-33,-2,4,-34,-8,-11,3,12,-9,-3,-11,5,14,-14,-18,0,5,22,-25,-45, 
  /* [3][0][][] */ 0,-90,0,4,3,-8,-10,-3,-12,-12,14,22,11,-9,53,3,-9,-18,-1,24,-8,22,-31,1,6,56,5,12,-9,8,127,-1,8,10,-3,5,-21,-13,-10,11,-9,11,-11,24,-4,-1,1,32, 
  /* [4][0][][] */ -94,14,1,4,0,-28,-3,6,36,-30,23,-15,-32,-4,-15,-2,1,2,-3,30,13,-25,21,7,-9,50,5,114,6,7,-2,-22,2,-127,-25,13,7,-8,7,0,-53,-10,-14,21,-55,-4,6,7, 
  /* [5][0][][] */ -17,26,12,9,-46,3,1,47,23,4,15,7,-10,-43,16,35,6,-85,15,8,47,-46,7,44,8,13,-70,-36,-36,-34,15,-9,-11,-71,11,-69,70,11,-36,13,28,-41,6,4,127,-15,-41,3, 
  /* [6][0][][] */ -27,-26,-12,4,34,-32,1,-18,-10,-5,36,-24,-6,38,0,-57,-2,7,3,-22,-30,48,0,-84,1,-14,-52,-68,25,42,-18,0,1,-58,-16,72,-62,-49,4,-54,-5,11,16,39,127,-26,37,23, 
  /* [7][0][][] */ 17,35,-76,29,-19,16,9,62,-11,1,66,-29,14,-25,-4,-2,-14,-127,41,-40,62,41,16,-60,23,-21,22,2,-15,33,-14,9,4,39,1,-27,-8,-57,-38,-65,-13,-34,43,66,-34,-23,0,8, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020790260285139084, 0.030315179377794266, 0.058569755405187607, 0.068784698843955994, 0.037075366824865341, 0.021406017243862152, 0.029181668534874916, 0.039068311452865601, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -52269, 83, 10547, -545, 5505, -5059, 1205, 24511, 1197, 40841, -2666, 24890, -5947, -825, 24808, 6045, 290, 17875, 26161, 11301, -232, -571, 380, 9477, -8303, 21201, 45401, 29996, 3684, 912, -935, 696, 1054, 15422, -7111, 17734, -11847, 25511, -22962, 119366, 16316, 21523, 10354, -1605, 15570, 3591, 1353, -8, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030617645825259387, 0.00027371564647182822, 0.00016439225873909891, 0.00035947171272709966, 0.00014081214612815529, 9.6167284937109798e-05, 0.0010658856481313705, 0.00014288281090557575, 0.0001493973977630958, 0.00012284576951060444, 0.00012250820873305202, 0.00017430978186894208, 0.00028954120352864265, 0.00037215187330730259, 0.00010094487515743822, 0.00025245471624657512, 0.00020336102170404047, 0.00021471992658916861, 9.5477102149743587e-05, 0.00015894859097898006, 0.00015734224871266633, 0.00030085540493018925, 0.00021348147129174322, 0.00021197757450863719, 0.00016273933579213917, 0.00018168754468206316, 0.00065545976394787431, 0.00010960426880046725, 0.00020517832308541983, 0.00086449342779815197, 8.5339808720164001e-05, 0.0002206449571531266, 0.00086667522555217147, 0.00018307697609998286, 0.0001707474875729531, 0.00014025050040800124, 0.00034268543822690845, 0.00010662560816854239, 0.00025249648024328053, 2.0654981199186295e-05, 0.00019967464322689921, 6.1529717640951276e-05, 0.00015644874656572938, 0.00020447792485356331, 0.00015144875214900821, 9.663274249760434e-05, 0.00019078415061812848, 0.00011522039130795747, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,110,4,81,-2,27,15,8,10,7,-9,-8,-45,8,-1,9,-23,-114,-6,-22,127,-10,-2,6,-5,10,-5,5,16,99,20,29,37,-27,2,33,-2,2,18,-68,-7,-9,17,3,-7,-10, 127,9,15,-127,27,86,10,10,122,127,7,43,-52,-23,5,8,127,-55,-59,-57,-100,25,-109,14,17,69,-31,-84,22,21,10,-122,5,-60,127,10,-39,-47,-6,115,-78,-99,-29,3,-35,-9,-127,23, -33,-3,8,15,-1,64,3,17,27,8,-13,31,-15,-2,15,4,-101,29,-3,78,-31,-11,-18,-6,-3,-60,-3,30,-17,5,5,-21,7,-23,16,-19,0,47,43,-12,50,37,-15,12,-43,2,-2,-6, 
  /* [0][1][][] */ 125,7,1,-98,13,-27,34,-16,8,8,-12,53,-7,-1,18,-33,0,-49,-59,-86,10,-73,-125,-18,6,97,-15,-127,-9,32,11,-106,16,-52,-3,127,-2,57,-42,41,-61,-127,39,-88,-44,-14,-12,-5, 26,-127,-127,116,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-82,127,127,-107,127,127,112,127,127,-127,-127,30,-127,-127,94,127,-127,127,-29,-41,127,-127,127,127,127,-79,127,127,127,-122,101,106, 53,5,49,-14,5,-61,43,18,-24,14,-104,-8,0,-39,127,5,63,-65,-70,86,15,-45,11,-32,2,5,-38,70,20,39,2,4,31,-43,9,66,-4,64,69,-9,-81,8,-83,-31,27,-17,-11,5, 
  /* [0][2][][] */ -53,-7,25,-17,7,34,-37,22,7,-24,12,32,6,-5,-37,18,5,22,-14,107,6,-31,-16,-12,-3,21,0,53,-10,3,46,-31,-19,-43,-32,-39,0,30,9,-22,10,-3,42,-36,-37,18,-11,18, 68,124,74,21,16,-20,122,35,17,-3,43,26,-5,0,-91,25,-57,-56,-35,124,-37,49,12,20,32,-64,-40,31,76,1,127,22,83,-26,7,-36,-24,-17,-14,118,-27,-12,-39,45,21,-32,8,-127, -42,-4,6,-3,5,-5,-62,8,-19,-11,-40,-40,19,-8,-9,12,33,24,-7,-127,24,-9,5,-8,-6,9,-10,-54,-15,8,7,9,-21,87,-37,-23,-4,36,26,-59,4,9,-37,7,-42,127,-4,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013012498617172241, 0.011632914654910564, 0.0069866711273789406, 0.015277547761797905, 0.0059845163486897945, 0.0040871095843613148, 0.045300137251615524, 0.0060725193470716476, 0.0063493894413113594, 0.0052209449931979179, 0.0052065989002585411, 0.0074081653729081154, 0.012305500917136669, 0.015816453844308853, 0.0042901569977402687, 0.010729325003921986, 0.0086428429931402206, 0.0091255968436598778, 0.0040577766485512257, 0.0067553147673606873, 0.0066870455630123615, 0.012786353938281536, 0.0090729622170329094, 0.0090090464800596237, 0.006916421465575695, 0.0077217202633619308, 0.027857039123773575, 0.004658181220293045, 0.0087200785055756569, 0.036740969866514206, 0.0036269419360905886, 0.0093774106353521347, 0.036833696067333221, 0.0077807712368667126, 0.0072567681781947613, 0.0059606460854411125, 0.014564130455255508, 0.0045315884053707123, 0.010731100104749203, 0.00087783666094765067, 0.0084861721843481064, 0.0026150129269808531, 0.0066490713506937027, 0.008690311573445797, 0.0064365719445049763, 0.0041068913415074348, 0.0081083262339234352, 0.0048968666233122349, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 79628, 6872, 6215, 7390, 1309, 11918, -1912, -264, 1031, 1962, 3459, 214, 1670, -922, 728, -2160, 4658, 10104, -240, 40492, 3568, 3361, 6986, -497, 3027, 4730, 22907, 12729, -86, -2309, 103, 2454, -2060, 11089, 2716, 7775, 7016, 4582, 27181, 2047, -890, 3027, 1027, 3472, 5115, 2309, -1303, 2819, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 5.4663712944602594e-05, 0.00032373759313486516, 0.00025160441873595119, 0.00043471335084177554, 0.0017042693216353655, 0.00042269201367162168, 0.00099465553648769855, 0.0010779870208352804, 0.0005680341855622828, 0.00068734632804989815, 0.00064600392943248153, 0.00057911901967599988, 0.00058043922763317823, 0.00053773977560922503, 0.00056539493380114436, 0.0016875220462679863, 0.00035273312823846936, 0.00042109060450457036, 0.0020121985580772161, 6.7190863774158061e-05, 0.00033602924668230116, 0.00029993586940690875, 0.00057289068354293704, 0.00102866196539253, 0.00039735657628625631, 0.00024950812803581357, 0.00017642625607550144, 0.00028751741047017276, 0.00087213335791602731, 0.0011211622040718794, 0.00054219778394326568, 0.00033035487285815179, 0.00096568797016516328, 0.00019739690469577909, 0.00038507196586579084, 0.00023656169651076198, 0.0005187551723793149, 0.00029922355315648019, 8.700119360582903e-05, 0.0022257794626057148, 0.00068164709955453873, 0.00090691715013235807, 0.00043573832954280078, 0.00043433325481601059, 0.00023972835333552212, 0.00048146868357434869, 0.00086319225374609232, 0.00093613768694922328, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 75,26,-18,3,127,26,-45,-36, 
  /* [1][0][][] */ -2,4,0,127,8,-1,5,6, 
  /* [2][0][][] */ 33,-127,-17,46,-3,-79,97,12, 
  /* [3][0][][] */ 127,-36,-2,19,-10,-27,31,5, 
  /* [4][0][][] */ 12,-55,127,-27,-9,-49,6,-87, 
  /* [5][0][][] */ 67,0,0,-9,127,17,-7,-3, 
  /* [6][0][][] */ -11,98,-15,127,17,42,-84,-57, 
  /* [7][0][][] */ -15,127,-5,4,1,-15,9,-3, 
  /* [8][0][][] */ 127,67,-5,0,-50,-21,-6,-45, 
  /* [9][0][][] */ -127,4,6,20,52,14,4,11, 
  /* [10][0][][] */ -62,-22,24,127,38,36,-16,4, 
  /* [11][0][][] */ -127,-3,13,-69,46,-4,-24,-37, 
  /* [12][0][][] */ 127,21,2,19,-49,-16,3,-38, 
  /* [13][0][][] */ -14,75,-127,-6,19,108,-74,73, 
  /* [14][0][][] */ -49,-25,-10,127,26,8,-17,-22, 
  /* [15][0][][] */ 3,127,-1,-5,7,-17,11,-55, 
  /* [16][0][][] */ -13,-127,-15,-4,1,-111,124,-23, 
  /* [17][0][][] */ 17,127,8,-9,-2,76,-83,-17, 
  /* [18][0][][] */ -2,58,-127,-11,12,52,-38,62, 
  /* [19][0][][] */ -111,15,-2,0,-127,7,37,40, 
  /* [20][0][][] */ -127,-31,-1,-6,93,-11,39,2, 
  /* [21][0][][] */ -61,1,-5,4,-127,-1,16,0, 
  /* [22][0][][] */ -127,-18,6,11,84,-18,32,49, 
  /* [23][0][][] */ -15,-15,-4,-8,3,72,-127,-94, 
  /* [24][0][][] */ -12,41,-127,4,15,56,-23,82, 
  /* [25][0][][] */ 94,-18,-12,127,-92,-18,6,-56, 
  /* [26][0][][] */ -2,-21,-5,4,-10,119,127,-28, 
  /* [27][0][][] */ 83,-10,-14,13,127,34,26,-32, 
  /* [28][0][][] */ -5,127,-73,10,18,90,-42,124, 
  /* [29][0][][] */ -8,7,0,-11,2,82,-127,-72, 
  /* [30][0][][] */ 2,-3,-1,-127,-4,1,-3,-13, 
  /* [31][0][][] */ -66,3,-4,-7,-127,7,4,-1, 
  /* [32][0][][] */ -15,45,10,-127,-1,43,-95,-114, 
  /* [33][0][][] */ -74,11,-5,-2,-127,53,47,-4, 
  /* [34][0][][] */ -127,82,15,27,53,-38,19,19, 
  /* [35][0][][] */ -22,127,-9,-17,-1,-87,83,-24, 
  /* [36][0][][] */ 4,41,15,-29,10,107,-127,-23, 
  /* [37][0][][] */ 33,-56,-15,23,22,-127,117,-30, 
  /* [38][0][][] */ 29,-127,23,1,15,47,-64,59, 
  /* [39][0][][] */ 0,-127,-12,-8,1,-10,-58,-108, 
  /* [40][0][][] */ 121,36,14,-13,-34,103,-127,-115, 
  /* [41][0][][] */ 11,-127,14,3,-2,77,-50,121, 
  /* [42][0][][] */ 65,-16,-9,-127,-32,7,-8,-40, 
  /* [43][0][][] */ -84,-32,16,-127,46,10,-20,-6, 
  /* [44][0][][] */ 8,-38,-3,31,-10,105,127,-23, 
  /* [45][0][][] */ -127,-44,9,10,16,6,22,-17, 
  /* [46][0][][] */ 16,85,127,-4,-4,15,15,29, 
  /* [47][0][][] */ 1,18,10,127,22,-3,4,-3, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00013433632557280362, 0.00079558667493984103, 0.00061831902712583542, 0.0010683101136237383, 0.0041882498189806938, 0.0010387676302343607, 0.0024443706497550011, 0.0026491580065339804, 0.0013959466014057398, 0.0016891568666324019, 0.0015875577228143811, 0.0014231876702979207, 0.0014264321653172374, 0.0013214980717748404, 0.0013894606381654739, 0.0041470932774245739, 0.00086684332927688956, 0.0010348320938646793, 0.0049449875950813293, 0.00016512186266481876, 0.00082579342415556312, 0.00073709379648789763, 0.0014078815001994371, 0.0025279414840042591, 0.00097650563111528754, 0.00061316735809668899, 0.00043356834794394672, 0.00070657540345564485, 0.0021432717330753803, 0.0027552612591534853, 0.0013324535684660077, 0.00081184867303818464, 0.0023731826804578304, 0.00048510381020605564, 0.00094631616957485676, 0.0005813514580950141, 0.0012748432345688343, 0.00073534325929358602, 0.00021380583348218352, 0.0054698633030056953, 0.0016751509392634034, 0.002228753175586462, 0.0010708289919421077, 0.001067375997081399, 0.00058913353132084012, 0.0011832115706056356, 0.0021212990395724773, 0.0023005628027021885, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -4969, -25183, 27578, 20146, 8198, 1302, 37314, 15196, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0012533899862319231, 0.00066558265825733542, 0.0011266447836533189, 0.0011936671799048781, 0.0013769094366580248, 0.0011251334799453616, 0.00080691982293501496, 0.00065598619403317571, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -13,-1,7,-96,8,25,4,8,3,2,0,-4,100,0,1,8,0,-7,-4,-2,77,5,1,9,30,36,10,9,4,6,5,-127,13,5,-1,2,-26,1,-15,34,8,-26,-10,8,-1,-1,2,1, 
  /* [1][0][][] */ -36,-7,-1,-5,43,23,-30,71,18,6,-27,-24,13,0,17,37,0,35,20,-49,2,20,127,20,-29,0,52,6,18,-5,16,-11,15,-9,-8,-20,5,-52,11,5,-5,-6,-77,-7,-32,7,-49,-92, 
  /* [2][0][][] */ -60,13,2,14,48,-14,32,22,-11,53,10,-8,2,0,7,57,0,10,-127,28,3,14,3,-15,-34,-1,36,9,11,32,25,5,7,-9,-10,-11,13,7,2,0,41,-8,-29,1,25,-60,27,17, 
  /* [3][0][][] */ 2,4,-5,8,-8,30,-1,2,69,17,-3,-2,29,0,-32,-11,0,5,-14,-3,-9,1,11,-19,-10,-1,-7,-10,-9,-6,-4,-10,-52,50,-62,-7,8,0,7,-127,-2,5,-1,-55,-6,-2,-5,4, 
  /* [4][0][][] */ -4,-7,79,34,3,-19,0,-10,3,2,0,-11,-81,0,-12,4,0,5,7,5,68,2,-2,-10,-16,26,-7,48,-4,-3,1,100,0,4,-1,2,19,-12,-16,-20,1,-127,4,1,2,-6,2,6, 
  /* [5][0][][] */ -7,48,8,-6,4,52,26,15,-16,29,4,54,21,0,-127,-3,0,17,-40,20,-11,14,-16,40,-25,2,25,-1,-14,24,22,-18,48,30,-39,-8,3,20,-45,14,25,-17,-9,25,24,58,26,25, 
  /* [6][0][][] */ -20,-55,-3,9,36,-45,-21,7,31,-29,-15,91,-2,0,-127,39,0,-8,49,-21,-9,2,26,-35,34,-3,-6,-15,44,-11,-10,-2,94,-32,25,-2,-2,-7,-71,-24,-12,-12,-4,-29,-18,-84,-19,-28, 
  /* [7][0][][] */ -117,-28,-14,5,127,23,68,27,16,3,29,-27,-27,0,86,102,0,10,-5,66,-15,-3,-31,41,15,4,43,5,58,64,56,-9,-14,-17,-25,-25,2,26,26,33,77,3,-29,-16,61,1,66,78, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.053269073367118835, 0.028287261724472046, 0.047882400453090668, 0.050730854272842407, 0.058518651872873306, 0.047818172723054886, 0.034294091165065765, 0.027879413217306137, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 55833, 51169, 60871, 42749, -186, 13678, 1771, 26861, 18291, 20961, 27772, 3670, -46301, -127, 34299, 882, -204, 32318, 3616, 1497, -15143, 2243, 49688, 32819, -25514, 31449, 37737, 21040, -2995, 16272, -9049, -51486, 9683, 100127, 23790, 1611, 51779, 368, 125479, -25305, 14844, -27613, 4095, 102059, -1807, 66753, 984, -22747, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010729474888648838, 7.7640397648792714e-05, 0.00016981721273623407, 0.00011120833369204774, 0.00033659502514638007, 0.00017247366486117244, 0.00013107748236507177, 5.9272104408591986e-05, 0.00011800695210695267, 3.5425931855570525e-05, 7.6918062404729426e-05, 3.4428860089974478e-05, 0.00016384216723963618, 0.005541567225009203, 7.4515679443720728e-05, 0.00031682374537922442, 0.0027484172023832798, 1.7677215510047972e-05, 7.9102610470727086e-05, 0.00018487680063117296, 0.00010533504246268421, 0.00012855180830229074, 0.00011700393224600703, 3.6789460864383727e-05, 0.00010626640869304538, 8.6545449448749423e-05, 3.3117761631729081e-05, 4.4701126171275973e-05, 0.00026449968572705984, 5.8215766330249608e-05, 5.8186000387649983e-05, 0.0001809886161936447, 0.00025182741228491068, 7.8510602179449052e-06, 0.00010685574670787901, 0.00017322803614661098, 1.7525717339594848e-05, 0.00043772521894425154, 3.6899153201375157e-05, 8.6872300016693771e-05, 6.3246356148738414e-05, 0.00020452775061130524, 9.2562979261856526e-05, 8.894882739696186e-06, 0.000138617935590446, 8.8295528257731348e-05, 0.00020161949214525521, 0.00011601625010371208, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-20,-8,-16,7,-39,-78,-68,-26,-50,9,65,34,-71,115,-44,-113,-85,36,-6,0,-73,-111,-81,-35,-125,-63,-23,71,15,95,26,-127,-88,-9,54,17,47,-127,79,-77,-14,104,-108,-3,-35,-88,109, 75,12,-29,-28,58,-127,-127,-82,60,-76,-115,110,38,-82,0,61,-52,-112,59,6,11,-112,-127,-71,-4,-127,-121,-43,-52,20,-55,54,29,-127,64,84,12,71,-92,127,-127,6,124,-127,2,-22,-127,95, -32,43,7,-5,-64,-108,-58,-17,87,-8,-127,39,8,-71,-101,-11,-127,-24,28,12,-15,-76,-36,-23,-10,-29,-59,-14,-8,17,-23,10,106,-85,69,31,14,35,-4,16,-78,4,7,-80,-16,6,-55,15, 
  /* [0][1][][] */ -85,-127,-44,-44,-10,55,99,-106,-27,-109,-21,111,89,-64,27,-97,-121,-94,90,-76,42,-89,-103,-127,42,-119,-77,-39,127,-61,127,84,-43,-86,-15,85,-36,-77,-107,89,41,59,105,-108,-91,-117,82,120, 127,-82,-127,-127,127,40,94,-127,98,-127,-109,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-121,-120,127,-99,-127,-127,-117,-127,-69,127,29,-112,127,127,-69,-127,-96,90,60,127,127,-116,-111,-127,127,127, -53,33,-61,-85,-118,-22,31,-37,127,-19,-75,36,56,-70,-26,-43,-37,-30,54,-70,56,-81,-39,-24,48,-5,-45,-59,17,-89,-35,21,29,-97,115,23,-36,-63,1,-14,36,54,10,-76,-57,-37,66,35, 
  /* [0][2][][] */ -60,-107,-33,-34,0,34,-5,-35,-39,-60,-15,58,76,-127,-127,-63,-43,-19,64,75,52,-34,-12,-60,33,-56,-10,-60,76,28,77,63,107,-28,-38,-9,-95,34,-17,30,9,37,15,-55,95,-78,4,31, 86,-74,-88,-84,81,18,6,-48,47,-71,-32,55,83,-26,16,93,-24,-31,77,117,81,-55,-18,-58,94,-67,-18,-98,-49,39,-44,111,-17,-50,67,7,-127,48,-15,0,10,32,15,-66,127,-100,-11,40, -28,31,-40,-36,-78,-19,22,-11,60,-4,-13,32,31,-43,111,-28,-93,-5,29,60,74,-30,-2,-2,44,1,-4,-61,-12,28,-19,41,-90,-43,65,3,-20,20,27,-37,7,35,-5,-17,63,-35,-3,19, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0045600268058478832, 0.0032997168600559235, 0.0072172312065958977, 0.0047263540327548981, 0.014305287972092628, 0.0073301307857036591, 0.0055707930587232113, 0.002519064350053668, 0.0050152954645454884, 0.0015056021511554718, 0.0032690176740288734, 0.0014632265083491802, 0.0069632921367883682, 0.23551659286022186, 0.0031669163145124912, 0.013465008698403835, 0.1168077290058136, 0.00075128162279725075, 0.0033618607558310032, 0.007857264019548893, 0.0044767390936613083, 0.0054634516127407551, 0.0049726669676601887, 0.0015635520685464144, 0.0045163221657276154, 0.0036781816743314266, 0.0014075047802180052, 0.0018997978186234832, 0.011241236701607704, 0.0024741699453443289, 0.0024729049764573574, 0.0076920161955058575, 0.010702664963901043, 0.00033367006108164787, 0.004541369155049324, 0.0073621915653347969, 0.00074484298238530755, 0.01860332116484642, 0.0015682140365242958, 0.0036920728161931038, 0.0026879699435085058, 0.0086924294009804726, 0.0039339265786111355, 0.00037803250597789884, 0.0058912620879709721, 0.0037525598891079426, 0.0085688279941678047, 0.0049306903965771198, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4224, 125, 11513, 7457, 6653, 7706, 13907, -35, 67, -371, 2454, 524, 14566, -89963872, 3186, 18130, -72623504, -120, -594, 14743, 5088, -19, -3, 488, 4353, -967, 54, 765, 4335, 1828, 2921, 17507, 4408, 277, 282, -2272, 442, 4885, -133, 11305, 2294, 13650, -474, -78, 14062, 235, 10752, 4137, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00049409066559746861, 0.00051354593597352505, 0.00027233175933361053, 0.00025148622808046639, 0.00029935486963950098, 0.00026644032914191484, 0.00027414597570896149, 0.001295793685130775, 0.00046443883911706507, 0.0020315817091614008, 0.00060306041268631816, 0.0016445171786472201, 0.0001516887714387849, 1.8027643822193795e-09, 0.00083258794620633125, 0.00018189979891758412, 1.8027643822193795e-09, 0.0059275454841554165, 0.00036362584796734154, 0.00026001775404438376, 0.00021125710918568075, 0.0042725866660475731, 0.00032871373696252704, 0.0013466717209666967, 0.00087375676957890391, 0.00056399061577394605, 0.0022253417409956455, 0.0016271125059574842, 0.00025477504823356867, 0.0016163836698979139, 0.00099782529287040234, 0.00013581264647655189, 0.00017093612405005842, 0.011870460584759712, 0.00058799720136448741, 0.00051629421068355441, 0.0035037260968238115, 0.00026680013979785144, 0.0025134601164609194, 0.00030747131677344441, 0.0012420433340594172, 0.00016209497698582709, 0.00038994924398139119, 0.010940450243651867, 0.00035681005101650953, 0.00044758524745702744, 0.00026381950010545552, 0.00020668946672230959, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 13,-127,53,-53,31,-16,-54,23, 
  /* [1][0][][] */ 84,66,-27,-100,7,6,-82,127, 
  /* [2][0][][] */ 28,1,-48,121,49,127,47,94, 
  /* [3][0][][] */ 77,70,-86,127,-100,-5,-7,15, 
  /* [4][0][][] */ -42,-80,66,15,0,24,-33,-127, 
  /* [5][0][][] */ 18,7,-38,48,2,-38,37,127, 
  /* [6][0][][] */ 63,-22,-127,-69,116,25,54,-21, 
  /* [7][0][][] */ 127,12,16,-19,31,-6,83,-56, 
  /* [8][0][][] */ 16,-89,14,104,-2,28,-2,-127, 
  /* [9][0][][] */ 111,-127,12,-2,-18,23,-116,91, 
  /* [10][0][][] */ -127,-44,-115,20,2,16,-112,65, 
  /* [11][0][][] */ -26,-52,-13,-110,-127,-31,53,-21, 
  /* [12][0][][] */ 13,4,-41,65,-79,-20,60,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -6,-31,1,6,37,127,42,45, 
  /* [15][0][][] */ 37,9,19,-127,68,44,-59,66, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 12,26,127,25,-23,-8,24,24, 
  /* [18][0][][] */ 93,-127,22,39,-9,22,-109,9, 
  /* [19][0][][] */ -127,-11,51,79,-61,-74,-116,81, 
  /* [20][0][][] */ 42,38,-46,126,-25,-127,1,72, 
  /* [21][0][][] */ 63,20,127,10,-15,-10,75,17, 
  /* [22][0][][] */ -81,-13,-127,1,7,8,-92,-1, 
  /* [23][0][][] */ -97,122,-19,-22,6,-2,127,-76, 
  /* [24][0][][] */ 4,-55,-55,85,-13,-57,101,127, 
  /* [25][0][][] */ 7,46,36,28,123,127,-73,-50, 
  /* [26][0][][] */ -82,-28,-127,-1,9,13,-90,0, 
  /* [27][0][][] */ -2,-40,-40,-5,-38,127,65,55, 
  /* [28][0][][] */ -1,-17,-19,39,19,127,56,62, 
  /* [29][0][][] */ 92,27,127,1,-19,-13,84,8, 
  /* [30][0][][] */ -92,127,-31,-28,10,-14,114,-48, 
  /* [31][0][][] */ -36,-86,-19,-1,36,-63,127,103, 
  /* [32][0][][] */ 7,-7,-47,118,-17,92,85,127, 
  /* [33][0][][] */ 0,67,-6,-102,6,-7,-10,127, 
  /* [34][0][][] */ -14,75,1,-88,34,-4,10,127, 
  /* [35][0][][] */ 127,2,-28,-33,23,29,104,-34, 
  /* [36][0][][] */ -127,-10,29,68,-45,17,-118,73, 
  /* [37][0][][] */ 1,-30,-8,28,34,127,44,59, 
  /* [38][0][][] */ 10,20,10,82,127,-5,-20,26, 
  /* [39][0][][] */ 2,28,38,-127,25,-2,-45,127, 
  /* [40][0][][] */ 98,21,127,7,-10,-2,89,-2, 
  /* [41][0][][] */ -4,-32,-27,78,45,127,69,100, 
  /* [42][0][][] */ -79,-6,127,25,-36,10,-29,58, 
  /* [43][0][][] */ -10,-54,6,98,-19,10,20,-127, 
  /* [44][0][][] */ 45,-3,-60,-127,59,-24,-20,-86, 
  /* [45][0][][] */ -86,127,-8,-53,9,9,82,-57, 
  /* [46][0][][] */ -127,-15,33,21,-31,38,-73,37, 
  /* [47][0][][] */ 100,25,119,-1,32,-34,127,-22, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010790311498567462, 0.0011215190170332789, 0.0005947379395365715, 0.00054921390255913138, 0.0006537529407069087, 0.00058187177637591958, 0.00059869996039196849, 0.0028298485558480024, 0.0010142753599211574, 0.0044367159716784954, 0.0013170072343200445, 0.0035914161708205938, 0.00033126896596513689, 3.937008052901092e-09, 0.0018182661151513457, 0.00039724601083435118, 3.937008052901092e-09, 0.012945004738867283, 0.00079411256592720747, 0.00056784570915624499, 0.00046135863522067666, 0.00933078583329916, 0.00071786897024139762, 0.0029409597627818584, 0.0019081736681982875, 0.001231683767400682, 0.0048598633147776127, 0.0035534065682440996, 0.00055639626225456595, 0.0035299763549119234, 0.0021791234612464905, 0.00029659754363819957, 0.00037330275517888367, 0.025923576205968857, 0.0012841110583394766, 0.0011275209253653884, 0.0076516917906701565, 0.00058265757979825139, 0.0054890769533813, 0.00067147822119295597, 0.0027124646585434675, 0.00035399480839259923, 0.00085159955779090524, 0.02389255166053772, 0.0007792277610860765, 0.00097746925894171, 0.00057614821707829833, 0.00045138350105844438, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -25, -43111, -8366, -12242, -34243, -1857, -25485, -26614, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0020720073953270912, 0.0022618682123720646, 0.0026969003956764936, 0.0012199189513921738, 0.0010705208405852318, 0.0020440025255084038, 0.0016183319967240095, 0.0011000195518136024, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,-2,-1,127,0,-2,1,0,-120,-94,-2,0,118,-2,0, 
  /* [1][0][][] */ 0,-30,-6,88,75,15,23,6,0,-2,127,-47,0,33,-17,0, 
  /* [2][0][][] */ 0,-1,-1,-12,-58,5,12,3,0,4,-17,2,0,127,-10,0, 
  /* [3][0][][] */ 0,-11,-20,-127,82,24,64,16,-1,62,0,41,0,1,20,0, 
  /* [4][0][][] */ 0,48,-22,35,-51,31,127,13,0,-56,17,-9,0,-3,14,0, 
  /* [5][0][][] */ 0,-14,-10,0,-24,-25,-15,16,0,12,-6,-47,0,-4,127,0, 
  /* [6][0][][] */ 0,23,-2,3,53,-24,-24,-9,0,-113,110,67,0,127,69,0, 
  /* [7][0][][] */ 0,16,-14,127,4,-2,15,8,0,70,-57,70,0,-6,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.08806031197309494, 0.096129395067691803, 0.11461826413869858, 0.051846552640199661, 0.045497134327888489, 0.086870104074478149, 0.068779110908508301, 0.046750828623771667, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 38035, 16084, 8599, 9565, 3571, 15405, 539, -12032, 5036, 29907, 14319, -445, 26422, 11235, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 6.9455942139029503e-05, 0.00024984599440358579, 0.00040738031384535134, 0.00018373310740571469, 0.00093062379164621234, 0.00034027488436549902, 0.0072239800356328487, 1.9659195459098555e-05, 0.00034835268161259592, 0.00019900157349184155, 0.00072845106478780508, 0.00072724185883998871, 0.00024348036095034331, 0.00018593529239296913, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,92,-2,-72,66,-95,77,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-21,13,-44,15,-29,14,-28,0,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-8,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,66,2,3,33,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,70,2,-6,38,-39,52,-76,0,0,5,40,2,-27,23, 23,-4,32,-2,-27,39,-34,21,-125,-13,0,85,-58,0,-28,-111, 21,-7,20,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.002951877424493432, 0.010618454776704311, 0.01731366291642189, 0.0078086568973958492, 0.039551511406898499, 0.014461682178080082, 0.30701914429664612, 0.00083551579155027866, 0.014804988168179989, 0.008457566611468792, 0.030959168449044228, 0.030907778069376945, 0.010347914882004261, 0.0079022496938705444, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, -5815, -102079, 48049, 377265, -1039, 29260, -8783, -141440, 72130, 14232, 684190, -1073741824, 62199, 23887, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00044473630259744823, 0.00014311376435216516, 3.2194042432820424e-05, 9.4183387773227878e-06, 0.00014216561976354569, 0.00012823652650695294, 0.00020593487715814263, 2.874673100450309e-06, 3.246070264140144e-05, 0.00021596364967990667, 8.2841115727205761e-06, 1.1533876076441629e-09, 6.2252125644590706e-05, 0.00012602764763869345, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 64,7,44, 6,-15,26, -127,-119,-65, 
  /* [1][1][][] */ 16,6,10, -12,14,4, 15,-23,16, 
  /* [1][2][][] */ 6,29,8, 5,17,6, 55,-11,23, 
  /* [2][0][][] */ 30,-2,-5, 77,119,1, 42,-31,9, 
  /* [2][1][][] */ 9,14,-1, 64,127,-27, 22,1,-4, 
  /* [2][2][][] */ 48,-62,19, 70,-42,-23, 32,-51,14, 
  /* [3][0][][] */ 6,29,0, 33,91,16, 2,6,-5, 
  /* [3][1][][] */ 18,32,3, 68,127,22, -9,-14,5, 
  /* [3][2][][] */ 1,-1,1, 28,27,8, 4,2,7, 
  /* [4][0][][] */ 41,65,-15, 20,79,-15, -19,4,-9, 
  /* [4][1][][] */ 49,93,42, 40,127,25, 27,46,-22, 
  /* [4][2][][] */ 58,79,26, 54,125,8, -22,20,13, 
  /* [5][0][][] */ 8,1,-121, -4,0,-105, -6,28,-23, 
  /* [5][1][][] */ 4,-44,-127, -2,-46,-114, -2,12,-23, 
  /* [5][2][][] */ -2,8,-18, 2,-2,-11, 1,12,-12, 
  /* [6][0][][] */ 25,-62,34, 46,-87,39, 8,-21,7, 
  /* [6][1][][] */ 35,-96,60, 62,-127,70, 6,-29,15, 
  /* [6][2][][] */ 19,-36,11, 13,-45,24, -14,6,-2, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ 121,127,110, 119,126,108, 120,125,107, 
  /* [8][1][][] */ 121,125,108, 117,122,105, 120,123,105, 
  /* [8][2][][] */ 119,123,107, 117,123,106, 119,122,105, 
  /* [9][0][][] */ -21,-4,8, -12,-7,-1, 8,7,-9, 
  /* [9][1][][] */ 104,121,-8, 76,127,12, -3,24,28, 
  /* [9][2][][] */ -20,-17,21, 5,-30,0, 12,4,-22, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,15, -17,-27,-1, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -9,-1,7, 
  /* [11][0][][] */ -6,-17,9, 18,-33,16, 4,-106,-57, 
  /* [11][1][][] */ -37,-32,-7, -26,-53,-25, -19,-63,-57, 
  /* [11][2][][] */ -9,-41,-80, 117,127,64, -44,9,-52, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -52,-98,-18, -62,-112,-26, -9,-18,-6, 
  /* [13][1][][] */ 61,114,14, 57,127,24, 7,15,10, 
  /* [13][2][][] */ -9,-20,2, 1,-19,-3, 0,4,-4, 
  /* [14][0][][] */ 45,-7,-38, 79,-26,-50, 32,-9,-20, 
  /* [14][1][][] */ 88,-18,-75, 127,-41,-90, 57,-20,-39, 
  /* [14][2][][] */ 52,-13,-50, 71,-24,-56, 22,-10,-22, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.11340775340795517, 0.03649400919675827, 0.0082094799727201462, 0.0024016762617975473, 0.036252230405807495, 0.0327003113925457, 0.052513390779495239, 0.00073304161196574569, 0.0082774786278605461, 0.055070728063583374, 0.0021124482154846191, 2.9411381774480105e-07, 0.015874290838837624, 0.032137047499418259, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.45790213346481323, } };
const TfArray<1, int> quant46_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.40691682696342468, } };
const TfArray<1, int> quant50_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.47693192958831787, } };
const TfArray<1, int> quant53_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.55983895063400269, } };
const TfArray<1, int> quant54_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.30609282851219177, } };
const TfArray<1, int> quant58_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20214179158210754, } };
const TfArray<1, int> quant61_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.31115889549255371, } };
const TfArray<1, int> quant62_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.21338534355163574, } };
const TfArray<1, int> quant65_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.3337160050868988, } };
const TfArray<1, int> quant66_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.063448980450630188, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13202843070030212, } };
const TfArray<1, int> quant69_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
